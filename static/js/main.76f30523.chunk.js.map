{"version":3,"sources":["services/request.js","constants.js","stores/zonesStore.js","stores/raidsStore.js","stores/index.js","App.js","hooks/useStores.jsx","serviceWorker.js","index.js"],"names":["client","axios","create","baseURL","request","options","params","api_key","then","response","console","debug","data","catch","error","config","status","headers","message","Promise","reject","ZonesStore","zones","getZoneName","id","name","forEach","zone","url","Object","values","push","decorate","observable","RaidsStore","raidsById","raids","activeRaid","setActiveRaid","raid","getFights","fightData","log","idx","duration","end","start","seconds","hours","parseInt","minutes","action","storesContext","React","createContext","zoneStore","ZoneStore","raidStore","useStyles","makeStyles","li","padding","backgroundColor","p","margin","App","observer","classes","useContext","style","display","height","width","overflow","borderRight","fontWeight","borderBottom","cursor","listStyle","map","key","className","onClick","title","Date","toDateString","owner","fights","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.76f30523.chunk.js","sourcesContent":["import axios from 'axios';\nimport { url } from 'constants.js';\n\nconst client = axios.create({\n  baseURL: url\n});\n\n/**\n * Request Wrapper with default success/error actions\n */\nconst request = function(options) {\n    const onSuccess = function(response) {\n      console.debug('Request Successful!', response);\n      return response.data;\n    }\n  \n    const onError = function(error) {\n      console.error('Request Failed:', error.config);\n  \n      // log response data if it exists\n      if (error.response) {\n        console.error('Status:',  error.response.status);\n        console.error('Data:',    error.response.data);\n        console.error('Headers:', error.response.headers);\n  \n      } else {\n        console.error('Error Message:', error.message);\n      }\n  \n      return Promise.reject(error.response || error.message);\n    }\n\n    // add the api_key to each request\n    options.params = {...options.params, api_key: 'ce3902772ae4b70c973b6a9f54f844fd'};\n  \n    return client(options)\n              .then(onSuccess)\n              .catch(onError);\n  }\n  \n  export default request;\n","const url = 'https://classic.warcraftlogs.com:443/v1/';\n\nexport {\n    url\n};","import { decorate, observable } from \"mobx\";\nimport request from \"services/request\";\n\nclass ZonesStore {\n  constructor() {\n    request({ url: \"/zones\" }).then((response) => {\n      Object.values(response).forEach((zone) => {\n        this.zones.push(zone);\n      });\n    });\n  }\n\n  zones = [];\n\n  getZoneName = (id) => {\n    let name = \"\";\n    this.zones.forEach((zone) => {\n      if (zone.id === id) {\n        name = zone.name;\n      }\n    });\n    return name;\n  };\n}\n\ndecorate(ZonesStore, {\n  zones: observable,\n});\n\nexport default ZonesStore;\n","import { action, decorate, observable } from \"mobx\";\nimport request from \"services/request\";\n\nclass RaidsStore {\n  raidsById = {};\n  raids = [];\n  activeRaid = {};\n\n  constructor() {\n    request({\n      url: \"/reports/guild/RIVAL/Fairbanks/US\",\n    }).then((response) => {\n      Object.values(response).forEach((raid, idx) => {\n        const duration = raid.end - raid.start;\n        if (duration > 0) {\n          this.raidsById[raid.id] = raid;\n          var seconds = duration / 1000;\n          var hours = parseInt(seconds / 3600);\n          seconds = seconds % 3600;\n          var minutes = parseInt(seconds / 60);\n          seconds = parseInt(seconds % 60);\n\n          this.raidsById[raid.id].duration = `${hours}:${minutes}:${seconds}`;\n          this.raids.push(raid);\n        }\n\n        // set active raid after we've added it to the dictionary\n        if (idx === 0) {\n          this.setActiveRaid(raid.id);\n        }\n      });\n    });\n  }\n\n  setActiveRaid = (id) => {\n    const raid = this.raidsById[id];\n\n    if (raid) {\n      this.activeRaid = raid;\n      this.getFights(raid.id);\n    }\n  };\n\n  getFights = (id) => {\n    const raid = this.raidsById[id];\n\n    if (raid) {\n      if (!raid.fightData) {\n        request({\n          url: `/report/fights/${raid.id}`,\n        }).then((response) => {\n          this.raidsById[raid.id] = { ...raid, fightData: response };\n          console.log(response);\n          this.activeRaid = this.raidsById[raid.id];\n        });\n      }\n    }\n  };\n}\n\ndecorate(RaidsStore, {\n  activeRaid: observable,\n  raids: observable,\n  setActiveRaid: action,\n});\n\nexport default RaidsStore;\n","import React from \"react\";\nimport ZoneStore from \"./zonesStore\";\nimport RaidsStore from \"./raidsStore\";\n\nexport const storesContext = React.createContext({\n  zoneStore: new ZoneStore(),\n  raidStore: new RaidsStore(),\n});\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport { observer } from \"mobx-react\";\nimport { useStores } from \"hooks/useStores\";\n\nconst useStyles = makeStyles({\n  li: {\n    padding: \"2px 0px\",\n    \"&.selected:hover\": {\n      backgroundColor: \"#85929E\",\n    },\n    \"&.selected:active\": {\n      backgroundColor: \"#5D6D7E\",\n    },\n    \"&.selected\": {\n      backgroundColor: \"#AEB6BF\",\n    },\n    \"&:hover\": {\n      backgroundColor: \"#EBEDEF\",\n    },\n    \"&:active\": {\n      backgroundColor: \"#D6DBDF\",\n    },\n  },\n  p: {\n    margin: \"2px 0px\",\n  },\n});\n\n// const populateRaids =  async () => {\n//   const res =  await request({\n//     url: '/reports/guild/RIVAL/Fairbanks/US',\n//     // url: '/report/fights/za4DHnM91BvyhkPr',\n//     // url: '/reports/user/Ragemonster',\n//     // url: '/rankings/character/Ragemonster/Fairbanks/US',\n//   });\n\n//     Object.values(res).forEach(raid => {\n//       raidsById[raid.id] = raid;\n//     });\n// }\n\nconst App = observer(() => {\n  const classes = useStyles();\n  const { raidStore, zoneStore } = useStores();\n\n  return (\n    <div style={{ display: \"flex\", height: \"100vh\" }}>\n      <div\n        style={{\n          width: \"300px\",\n          overflow: \"auto\",\n          borderRight: \"2px solid black\",\n        }}\n      >\n        <p\n          style={{\n            fontWeight: \"bold\",\n            margin: \"5px 20px\",\n            borderBottom: \"2px solid black\",\n          }}\n        >\n          Raids:\n        </p>\n        <ul\n          style={{\n            cursor: \"pointer\",\n            listStyle: \"none\",\n            margin: \"0px\",\n            padding: \"0px 20px\",\n          }}\n        >\n          {raidStore.raids.map((raid) => (\n            <li\n              key={raid.id}\n              className={`${classes.li}${\n                raid.id === raidStore.activeRaid.id ? \" selected\" : \"\"\n              }`}\n              onClick={() => raidStore.setActiveRaid(raid.id)}\n            >\n              {raid.title}\n            </li>\n          ))}\n        </ul>\n      </div>\n      <div style={{ padding: \"5px 20px\" }}>\n        <p className={classes.p}>\n          <b>Raid:</b> {raidStore.activeRaid.title}\n        </p>\n        <p className={classes.p}>\n          <b>Date:</b> {new Date(raidStore.activeRaid.start).toDateString()}\n        </p>\n        <p className={classes.p}>\n          <b>Instance:</b> {zoneStore.getZoneName(raidStore.activeRaid.zone)}\n        </p>\n        <p className={classes.p}>\n          <b>Owner:</b> {raidStore.activeRaid.owner}\n        </p>\n        <p className={classes.p}>\n          <b>Duration:</b> {raidStore.activeRaid.duration}\n        </p>\n        {raidStore.activeRaid.fightData && (\n          <p>Fights: {raidStore.activeRaid.fightData.fights.length}</p>\n        )}\n      </div>\n    </div>\n  );\n});\n\nexport default App;\n","import React from 'react'\nimport { storesContext } from 'stores'\n\nexport const useStores = () => React.useContext(storesContext);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}