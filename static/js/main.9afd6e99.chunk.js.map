{"version":3,"sources":["services/request.js","constants.js","stores/zonesStore.js","stores/raidsStore.js","stores/index.js","App.js","hooks/useStores.jsx","serviceWorker.js","index.js"],"names":["client","axios","create","baseURL","request","options","params","api_key","then","response","data","catch","error","Promise","reject","message","ZonesStore","zones","getZoneName","id","name","forEach","zone","decorate","observable","RaidsStore","raidsById","fightsByRaidId","parsesByRaider","loading","loadingBracketParses","loadingOverallParses","loadingZones","medianBracket","bestBracket","medianOverall","bestOverall","updateWhenFinished","reaction","end","Date","now","console","log","start","Object","keys","raider","bestBracketRow","medianBracketRow","bestOverallRow","medianOverallRow","bracket","boss","best","average","count","percentile","Number","isInteger","toFixed","overall","push","localStorage","setItem","JSON","stringify","this","storageRaidsById","parse","getItem","raidCutoff","weeks","url","raidsToGetFightsFor","values","raid","idx","dayOfWeek","getDay","raidsPreviouslyParsed","needToGetData","includes","requests","raidId","all","spread","responses","fightsToGetRaidersFrom","title","fight","exportedCharacters","char","bracketRequests","raiders","length","i","overallRequests","bracketResponses","characterName","filter","startTime","encounter","encounterID","errors","overallResponses","storesContext","React","createContext","zoneStore","ZoneStore","raidStore","useStyles","makeStyles","li","padding","backgroundColor","p","margin","App","observer","useContext","getParseColor","value","color","generateTable","bwl","find","headers","encounters","rows","row","style","borderCollapse","map","d","textAlign","fontWeight","border","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9afd6e99.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { url } from \"constants.js\";\n\nconst client = axios.create({\n  baseURL: url,\n});\n\n/**\n * Request Wrapper with default success/error actions\n */\nconst request = function (options) {\n  const onSuccess = function (response) {\n    // console.debug(\"Request Successful!\", response);\n    return response.data;\n  };\n\n  const onError = function (error) {\n    // console.error('Request Failed:', error.config);\n\n    // // log response data if it exists\n    // if (error.response) {\n    //   console.error('Status:',  error.response.status);\n    //   console.error('Data:',    error.response.data);\n    //   console.error('Headers:', error.response.headers);\n\n    // } else {\n    //   console.error('Error Message:', error.message);\n    // }\n\n    return Promise.reject(error.response || error.message);\n  };\n\n  // add the api_key to each request\n  options.params = { ...options.params, api_key: \"ce3902772ae4b70c973b6a9f54f844fd\" };\n\n  return client(options).then(onSuccess).catch(onError);\n};\n\nexport default request;\n","const url = 'https://classic.warcraftlogs.com:443/v1/';\n\nexport {\n    url\n};","import { decorate, observable } from \"mobx\";\nimport request from \"services/request\";\n\nclass ZonesStore {\n  constructor() {\n    // request({ url: \"/zones\" }).then((response) => {\n    //   Object.values(response).forEach((zone) => {\n    //     this.zones.push(zone);\n    //   });\n    // });\n  }\n\n  zones = [];\n\n  getZoneName = (id) => {\n    let name = \"\";\n    this.zones.forEach((zone) => {\n      if (zone.id === id) {\n        name = zone.name;\n      }\n    });\n    return name;\n  };\n}\n\ndecorate(ZonesStore, {\n  zones: observable,\n});\n\nexport default ZonesStore;\n","import { action, decorate, observable, reaction } from \"mobx\";\nimport axios from \"axios\";\nimport request from \"services/request\";\n\nconst weekInNanoSeconds = 7 * 24 * 60 * 60 * 1000;\nconst Wednesday = 3;\nconst Thursday = 4;\nconst weeks = 4;\nconst requestDelay = 350;\n\nclass RaidsStore {\n  raidsById = {};\n  fightsByRaidId = {};\n  parsesByRaider = {};\n  zones = {};\n\n  loading = true;\n  loadingBracketParses = true;\n  loadingOverallParses = true;\n  loadingZones = true;\n\n  medianBracket = [];\n  bestBracket = [];\n  medianOverall = [];\n  bestOverall = [];\n\n  start;\n  end;\n\n  constructor() {\n    this.storageRaidsById = JSON.parse(localStorage.getItem(\"raids\")) ?? {};\n    this.fightsByRaidId = JSON.parse(localStorage.getItem(\"fights\")) ?? {};\n    this.parsesByRaider = JSON.parse(localStorage.getItem(\"parses\")) ?? {};\n\n    this.start = Date.now();\n    const raidCutoff = this.start - weeks * weekInNanoSeconds;\n\n    request({ url: \"/zones\" }).then((response) => {\n      this.zones = response;\n      this.loadingZones = false;\n    });\n\n    request({\n      url: \"/reports/guild/RIVAL/Fairbanks/US\",\n    }).then((response) => {\n      console.log(\"have guild fights\");\n      const raidsToGetFightsFor = [];\n      Object.values(response).forEach((raid, idx) => {\n        const duration = raid.end - raid.start;\n        if (duration > 0) {\n          const dayOfWeek = new Date(raid.start).getDay();\n          this.raidsById[raid.id] = raid;\n\n          if (raid.start > raidCutoff && (dayOfWeek === Wednesday || dayOfWeek === Thursday) && raid.zone === 1002) {\n            raidsToGetFightsFor.push(raid.id);\n          }\n        }\n      });\n\n      const raidsPreviouslyParsed = Object.keys(this.storageRaidsById);\n      let needToGetData = false;\n\n      raidsToGetFightsFor.forEach((id) => {\n        if (!raidsPreviouslyParsed.includes(id)) {\n          needToGetData = true;\n        }\n      });\n\n      if (needToGetData) {\n        console.log(\"grabbing data from warcraft logs\");\n        const requests = [];\n        raidsToGetFightsFor.forEach((raidId) => {\n          requests.push(request({ url: `/report/fights/${raidId}` }));\n        });\n\n        axios.all(requests).then(\n          axios.spread((...responses) => {\n            const fightsToGetRaidersFrom = [];\n            Object.values(this.raidsById).forEach((raid) => {\n              responses.forEach((response) => {\n                this.fightsByRaidId[raid.id] = response;\n                if (raid.start === response.start && raid.title === response.title) {\n                  fightsToGetRaidersFrom.push(response);\n                }\n              });\n            });\n\n            fightsToGetRaidersFrom.forEach((fight) => {\n              fight.exportedCharacters.forEach((char) => {\n                this.parsesByRaider[char.name] = {};\n              });\n            });\n\n            //send parse requests for bracket parses delayed between each other to prevent api lockout\n            const bracketRequests = [];\n            const raiders = Object.keys(this.parsesByRaider);\n            console.log(\"raiders found:\", raiders.length);\n            for (let i = 0; i < raiders.length; i++) {\n              const raider = raiders[i];\n              bracketRequests.push(\n                request({ url: `/parses/character/${raider}/Fairbanks/US`, params: { bracket: -1 } })\n              );\n            }\n\n            const overallRequests = [];\n            for (let i = 0; i < raiders.length; i++) {\n              const raider = raiders[i];\n              overallRequests.push(request({ url: `/parses/character/${raider}/Fairbanks/US` }));\n            }\n\n            axios\n              .all(bracketRequests)\n              .then(\n                axios.spread((...bracketResponses) => {\n                  bracketResponses.forEach((response) => {\n                    if (response[0]) {\n                      const name = response[0].characterName;\n                      this.parsesByRaider[name].bracket = {};\n                      const data = response.filter((parse) => parse.startTime > raidCutoff);\n\n                      data.forEach((encounter) => {\n                        if (!this.parsesByRaider[name].bracket[encounter.encounterID]) {\n                          this.parsesByRaider[name].bracket[encounter.encounterID] = [];\n                        }\n                        this.parsesByRaider[name].bracket[encounter.encounterID].push(encounter.percentile);\n                      });\n                    }\n                  });\n                  this.loadingBracketParses = false;\n                })\n              )\n              .catch((errors) => {\n                console.log(errors);\n                this.loadingBracketParses = false;\n              });\n\n            axios\n              .all(overallRequests)\n              .then(\n                axios.spread((...overallResponses) => {\n                  overallResponses.forEach((response) => {\n                    if (response[0]) {\n                      const name = response[0].characterName;\n                      this.parsesByRaider[name].overall = {};\n                      const data = response.filter((parse) => parse.startTime > raidCutoff);\n\n                      data.forEach((encounter) => {\n                        if (!this.parsesByRaider[name].overall[encounter.encounterID]) {\n                          this.parsesByRaider[name].overall[encounter.encounterID] = [];\n                        }\n                        this.parsesByRaider[name].overall[encounter.encounterID].push(encounter.percentile);\n                      });\n                    }\n                  });\n                  this.loadingOverallParses = false;\n                })\n              )\n              .catch((errors) => {\n                console.log(errors);\n                this.loadingOverallParses = false;\n              });\n          })\n        );\n      } else {\n        // we're done loading because it was found in local storage\n        this.loadingBracketParses = false;\n        this.loadingOverallParses = false;\n      }\n    });\n  }\n\n  updateWhenFinished = reaction(\n    () => this.loadingBracketParses || this.loadingOverallParses || this.loadingZones,\n    () => {\n      if (!this.loadingBracketParses && !this.loadingOverallParses && !this.loadingZones) {\n        this.end = Date.now();\n        console.log(\"done loading, time elapsed: \", this.end - this.start);\n\n        Object.keys(this.parsesByRaider).forEach((raider) => {\n          const bestBracketRow = { name: raider };\n          const medianBracketRow = { name: raider };\n          const bestOverallRow = { name: raider };\n          const medianOverallRow = { name: raider };\n\n          if (this.parsesByRaider[raider].bracket) {\n            Object.keys(this.parsesByRaider[raider].bracket).forEach((boss) => {\n              let best = 0;\n              let average = 0;\n              let count = 0;\n              this.parsesByRaider[raider].bracket[boss].forEach((percentile) => {\n                if (percentile > best) {\n                  best = percentile;\n                }\n\n                average += percentile;\n                count += 1;\n              });\n              average /= count;\n              bestBracketRow[boss] = Number.isInteger(best) ? best : best.toFixed(2);\n              medianBracketRow[boss] = Number.isInteger(average) ? average : average.toFixed(2);\n            });\n          }\n\n          if (this.parsesByRaider[raider].overall) {\n            Object.keys(this.parsesByRaider[raider].overall).forEach((boss) => {\n              let best = 0;\n              let average = 0;\n              let count = 0;\n              this.parsesByRaider[raider].overall[boss].forEach((percentile) => {\n                if (percentile > best) {\n                  best = percentile;\n                }\n\n                average += percentile;\n                count += 1;\n              });\n              average /= count;\n              bestOverallRow[boss] = Number.isInteger(best) ? best : best.toFixed(2);\n              medianOverallRow[boss] = Number.isInteger(average) ? average : average.toFixed(2);\n            });\n          }\n          this.bestBracket.push(bestBracketRow);\n          this.medianBracket.push(medianBracketRow);\n          this.bestOverall.push(bestOverallRow);\n          this.medianOverall.push(medianOverallRow);\n        });\n\n        this.loading = false;\n        localStorage.setItem(\"raids\", JSON.stringify(this.raidsById));\n        localStorage.setItem(\"fights\", JSON.stringify(this.fightsByRaidId));\n        localStorage.setItem(\"parses\", JSON.stringify(this.parsesByRaider));\n      }\n    }\n  );\n}\n\ndecorate(RaidsStore, {\n  loading: observable,\n  loadingBracketParses: observable,\n  loadingOverallParses: observable,\n  loadingZones: observable,\n  bestBracket: observable,\n  medianBracket: observable,\n  bestOverall: observable,\n  medianOverall: observable,\n  zones: observable,\n});\n\nexport default RaidsStore;\n","import React from \"react\";\nimport ZoneStore from \"./zonesStore\";\nimport RaidsStore from \"./raidsStore\";\n\nexport const storesContext = React.createContext({\n  zoneStore: new ZoneStore(),\n  raidStore: new RaidsStore(),\n});\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport { observer } from \"mobx-react\";\nimport { useStores } from \"hooks/useStores\";\n\nconst useStyles = makeStyles({\n  li: {\n    padding: \"2px 0px\",\n    \"&.selected:hover\": {\n      backgroundColor: \"#85929E\",\n    },\n    \"&.selected:active\": {\n      backgroundColor: \"#5D6D7E\",\n    },\n    \"&.selected\": {\n      backgroundColor: \"#AEB6BF\",\n    },\n    \"&:hover\": {\n      backgroundColor: \"#EBEDEF\",\n    },\n    \"&:active\": {\n      backgroundColor: \"#D6DBDF\",\n    },\n  },\n  p: {\n    margin: \"2px 0px\",\n  },\n});\n\nconst App = observer(() => {\n  const classes = useStyles();\n  const { raidStore, zoneStore } = useStores();\n\n  const getParseColor = (value) => {\n    let color = \"black\";\n    if (value === 100) {\n      color = \"#F4D03F\";\n    } else if (value >= 95 && value < 100) {\n      color = \"#F39C12\";\n    } else if (value >= 75 && value < 95) {\n      color = \"#8E44AD\";\n    } else if (value >= 50 && value < 75) {\n      color = \"#3498DB\";\n    } else if (value >= 25 && value < 50) {\n      color = \"#2ECC71\";\n    } else if (value >= 0 && value < 25) {\n      color = \"#BDC3C7\";\n    }\n    return color;\n  };\n\n  const generateTable = (data) => {\n    const bwl = raidStore.zones.find((zone) => zone.id === 1002);\n    // generate header row\n    const headers = [\"Raider\"];\n    bwl.encounters.forEach((encounter) => {\n      headers.push(encounter.name);\n    });\n\n    const rows = [];\n    data.forEach((raider) => {\n      const row = [raider.name];\n      bwl.encounters.forEach((encounter) => {\n        row.push(raider[encounter.id] ?? \"-\");\n      });\n      rows.push(row);\n    });\n\n    return (\n      <table style={{ borderCollapse: \"collapse\" }}>\n        <thead>\n          <tr>\n            {headers.map((d) => (\n              <th\n                style={{\n                  padding: \"5px\",\n                  textAlign: \"left\",\n                  fontWeight: \"bold\",\n                  backgroundColor: \"#5D6D7E\",\n                  color: \"white\",\n                  border: \"1px solid black\",\n                }}\n              >\n                {d}\n              </th>\n            ))}\n          </tr>\n        </thead>\n\n        <tbody>\n          {rows.map((row) => (\n            <tr>\n              {row.map((d) => (\n                <td style={{ padding: \"0px 5px\", border: \"1px solid black\", color: `${getParseColor(d)}` }}>{d}</td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n    console.log(headers);\n    console.log(rows);\n  };\n\n  return (\n    <div>\n      {raidStore.loading ? (\n        \"Loading...\"\n      ) : (\n        <div>\n          <h1>Median Bracket:</h1>\n          {generateTable(raidStore.medianBracket)}\n          <h1>Best Bracket:</h1>\n          {generateTable(raidStore.bestBracket)}\n          <h1>Median Overall:</h1>\n          {generateTable(raidStore.medianOverall)}\n          <h1>Best Overall:</h1>\n          {generateTable(raidStore.bestOverall)}\n        </div>\n      )}\n    </div>\n  );\n});\n\nexport default App;\n","import React from 'react'\nimport { storesContext } from 'stores'\n\nexport const useStores = () => React.useContext(storesContext);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}