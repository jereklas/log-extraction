{"version":3,"sources":["services/request.js","constants.js","stores/raidsStore.js","stores/index.js","App.js","hooks/useStores.jsx","serviceWorker.js","index.js"],"names":["client","axios","create","baseURL","request","options","params","api_key","then","response","console","debug","data","catch","error","config","status","headers","message","Promise","reject","RaidsStore","raidsToGetFightsFor","parsesByRaider","zones","loading","loadingBracketParses","loadingOverallParses","loadingZones","needToGetData","timeRemaining","medianBracket","bestBracket","medianOverall","bestOverall","healerTypes","healerExclusionList","healers","isRaidDataOutOfDate","lastSeenRaids","JSON","parse","localStorage","getItem","length","forEach","id","includes","findRaids","raids","zone","timeFrameInWeeks","filter","raid","start","Date","now","getZoneId","map","findRaiders","responses","raidFights","title","push","fight","exportedCharacters","char","friendlyData","friendlies","find","e","name","type","updateWhenFinished","reaction","log","Object","keys","sort","raider","bestBracketRow","medianBracketRow","bestOverallRow","medianOverallRow","bracket","bossKey","boss","average","parses","percentile","Number","isInteger","best","toFixed","isNaN","overall","setItem","stringify","this","parseCutoff","url","requests","raidId","all","spread","bracketRequests","raiders","secondsRemaining","Math","floor","i","setTimeout","metric","overallRequests","bracketResponses","characterName","encounter","encounterID","startTime","errors","overallResponses","zoneName","z","decorate","observable","storesContext","React","createContext","raidStore","App","observer","useContext","getParseColor","value","color","generateTable","bwl","encounters","rows","row","avg","count","style","borderCollapse","d","key","padding","textAlign","fontWeight","backgroundColor","border","margin","join","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2RAGMA,EAASC,IAAMC,OAAO,CAC1BC,QCJU,6CDqCGC,EA3BC,SAAUC,GAwBxB,OAFAA,EAAQC,OAAR,eAAsBD,EAAQC,OAA9B,CAAsCC,QAAS,qCAExCP,EAAOK,GAASG,MAvBL,SAAUC,GAE1B,OADAC,QAAQC,MAAM,sBAAuBF,GAC9BA,EAASG,QAqBqBC,OAlBvB,SAAUC,GAYxB,OAXAJ,QAAQI,MAAM,kBAAmBA,EAAMC,QAGnCD,EAAML,UACRC,QAAQI,MAAM,UAAWA,EAAML,SAASO,QACxCN,QAAQI,MAAM,QAASA,EAAML,SAASG,MACtCF,QAAQI,MAAM,WAAYA,EAAML,SAASQ,UAEzCP,QAAQI,MAAM,iBAAkBA,EAAMI,SAGjCC,QAAQC,OAAON,EAAML,UAAYK,EAAMI,aErB5CG,E,WA4FJ,aAAe,IAAD,kCA3FdC,oBAAsB,GA2FR,KA1FdC,eAAiB,GA0FH,KAzFdC,MAAQ,GAyFM,KAvFdC,SAAU,EAuFI,KAtFdC,sBAAuB,EAsFT,KArFdC,sBAAuB,EAqFT,KApFdC,cAAe,EAoFD,KAnFdC,eAAgB,EAmFF,KAlFdf,MAAQ,GAkFM,KAjFdgB,cAAgB,EAiFF,KA/EdC,cAAgB,GA+EF,KA9EdC,YAAc,GA8EA,KA7EdC,cAAgB,GA6EF,KA5EdC,YAAc,GA4EA,KA1EdC,YAAc,CAAC,SAAU,UAAW,SA0EtB,KAzEdC,oBAAsB,CAAC,aAAc,OAAQ,SAyE/B,KAxEdC,QAAU,GAwEI,KA7DdC,oBAAsB,WACpB,IAAMC,EAAgBC,KAAKC,MAAMC,aAAaC,QAAQ,kBAClDd,GAAgB,EAYpB,OAVKU,GAAiB,EAAKjB,oBAAoBsB,OAAS,EACtDf,GAAgB,EAEhB,EAAKP,oBAAoBuB,SAAQ,SAACC,GAC3BP,EAAcQ,SAASD,KAC1BjB,GAAgB,MAKfA,GA+CK,KArCdmB,UAAY,SAACC,EAAOC,EAAMC,GACxB,OAAOF,EACJG,QACC,SAACC,GAAD,OAAUA,EAAKC,MAAQC,KAAKC,MA7DV,OA6DkBL,GAAwCE,EAAKH,OAAS,EAAKO,UAAUP,MAE1GQ,KAAI,SAACL,GAAD,OAAUA,EAAKP,OAgCV,KAzBda,YAAc,SAACC,GACb,IAAMC,EAAa,GACnB,EAAKZ,MAAMJ,SAAQ,SAACQ,GAClBO,EAAUf,SAAQ,SAACpC,GACb4C,EAAKC,QAAU7C,EAAS6C,OAASD,EAAKS,QAAUrD,EAASqD,OAC3DD,EAAWE,KAAKtD,SAKtBoD,EAAWhB,SAAQ,SAACmB,GAClBA,EAAMC,mBAAmBpB,SAAQ,SAACqB,GAChC,IAAMC,EAAeH,EAAMI,WAAWC,MAAK,SAACC,GAAD,OAAOA,EAAEC,OAASL,EAAKK,SAEhE,EAAKpC,YAAYY,SAASoB,EAAaK,OACtC,EAAKpC,oBAAoBW,SAASoB,EAAaI,OAC/C,EAAKlC,QAAQU,SAASoB,EAAaI,OAEpC,EAAKlC,QAAQ0B,KAAKI,EAAaI,MAEjC,EAAKhD,eAAe2C,EAAKK,MAAQ,UAKzB,KAyKdE,mBAAqBC,aACnB,kBAAM,EAAKhD,sBAAwB,EAAKC,sBAAwB,EAAKC,gBACrE,WACO,EAAKF,sBAAyB,EAAKC,sBAAyB,EAAKC,eACpElB,QAAQiE,IAAR,uCAA4CpB,KAAKC,MAAQ,EAAKF,OAAS,IAAvE,MAEgBsB,OAAOC,KAAK,EAAKtD,gBAAgBuD,OACzCjC,SAAQ,SAACkC,GACf,IAAMC,EAAiB,CAAET,KAAMQ,GACzBE,EAAmB,CAAEV,KAAMQ,GAC3BG,EAAiB,CAAEX,KAAMQ,GACzBI,EAAmB,CAAEZ,KAAMQ,GAEzBK,EAAY,EAAK7D,eAAewD,GAAhCK,QACJA,GACFR,OAAOC,KAAKO,GAASvC,SAAQ,SAACwC,GAC5B,IAAMC,EAAOF,EAAQC,GACjBE,EAAU,EACdD,EAAKE,OAAO3C,SAAQ,SAAC4C,GACnBF,GAAWE,KAEbF,GAAWD,EAAKE,OAAO5C,OACvBoC,EAAeK,GAAWK,OAAOC,UAAUL,EAAKM,MAAQN,EAAKM,KAAON,EAAKM,KAAKC,QAAQ,GACtFZ,EAAiBI,GAAWK,OAAOI,MAAMP,GACrC,IACAG,OAAOC,UAAUJ,GACjBA,EACAA,EAAQM,QAAQ,MApBE,IAwBlBE,EAAY,EAAKxE,eAAewD,GAAhCgB,QACJA,GACFnB,OAAOC,KAAKkB,GAASlD,SAAQ,SAACwC,GAC5B,IAAMC,EAAOS,EAAQV,GACjBE,EAAU,EACdD,EAAKE,OAAO3C,SAAQ,SAAC4C,GACnBF,GAAWE,KAEbF,GAAWD,EAAKE,OAAO5C,OACvBsC,EAAeG,GAAWK,OAAOC,UAAUL,EAAKM,MAAQN,EAAKM,KAAON,EAAKM,KAAKC,QAAQ,GACtFV,EAAiBE,GAAWK,OAAOI,MAAMP,GACrC,IACAG,OAAOC,UAAUJ,GACjBA,EACAA,EAAQM,QAAQ,MAIxB,EAAK7D,YAAY+B,KAAKiB,GACtB,EAAKjD,cAAcgC,KAAKkB,GACxB,EAAK/C,YAAY6B,KAAKmB,GACtB,EAAKjD,cAAc8B,KAAKoB,MAG1B,EAAK1D,SAAU,EACfiB,aAAasD,QAAQ,gBAAiBxD,KAAKyD,UAAU,EAAK3E,sBAC1DoB,aAAasD,QAAQ,iBAAkBxD,KAAKyD,UAAU,EAAK1E,qBAjO/D2E,KAAK3E,eAAL,UAAsBiB,KAAKC,MAAMC,aAAaC,QAAQ,0BAAtD,QAA4E,GAE5EuD,KAAK5C,MAAQC,KAAKC,MAClB,IAAM2C,EAAcD,KAAK5C,MAAQ,QAEjClD,EAAQ,CAAEgG,IAAK,WAAY5F,MAAK,SAACC,GAC/B,EAAKe,MAAQf,EACb,EAAKmB,cAAe,KAItB8C,aACE,kBAAM,EAAK9C,gBACX,WACExB,EAAQ,CACNgG,IAAK,sCACJ5F,MAAK,SAACC,GACP,EAAKwC,MAAQxC,EACb,EAAKa,oBAAsB,EAAK0B,UAAUvC,EAAU,sBAAuB,GAC3E,EAAKoB,cAAgB,EAAKS,sBAErB,EAAKT,gBACR,EAAKH,sBAAuB,EAC5B,EAAKC,sBAAuB,SAOpC+C,aACE,kBAAM,EAAK7C,iBACX,WACE,IAAMwE,EAAW,GACjB,EAAK/E,oBAAoBuB,SAAQ,SAACyD,GAChCD,EAAStC,KAAK3D,EAAQ,CAAEgG,IAAI,kBAAD,OAAoBE,SAGjDrG,IAAMsG,IAAIF,GAAU7F,KAClBP,IAAMuG,QAAO,WAAmB,IAAD,uBAAd5C,EAAc,yBAAdA,EAAc,gBAC7B,EAAKD,YAAYC,GAGjB,IAAM6C,EAAkB,GAClBC,EAAU9B,OAAOC,KAAK,EAAKtD,gBAE3BoF,EAAmBC,KAAKC,MA7IrB,KA6I6BH,EAAQ9D,OAAS,GAAqB,KAC5E,EAAKd,cAAgB6E,EAErB,IAAK,IAAIG,EAAI,EAAGA,EAAIH,EAAkBG,IACpCC,YAAW,WACT,EAAKjF,cAAgB,EAAKA,cAAgB,IACrC,IAAJgF,GAGL,IAhB6B,eAgBpBA,GACPC,YAAW,WACT,IAAMhC,EAAS2B,EAAQI,GACvBL,EAAgB1C,KACd3D,EAAQ,CACNgG,IAAI,qBAAD,OAAuBrB,EAAvB,iBACHzE,OAAQ,CACN8E,SAAU,EACVlC,KAAM,EAAKO,UAAU,uBACrBuD,OAAQ,EAAK3E,QAAQU,SAAS2D,EAAQ,IAAM,MAAQ,YA/JrD,IAmKWI,IAbXA,EAAI,EAAGA,EAAIJ,EAAQ9D,OAAQkE,IAAM,EAAjCA,GAiBT,IADA,IAAMG,EAAkB,GAhCK,WAiCpBH,GACPC,YAAW,WACT,IAAMhC,EAAS2B,EAAQI,GACvBG,EAAgBlD,KACd3D,EAAQ,CACNgG,IAAI,qBAAD,OAAuBrB,EAAvB,iBACH7B,KAAM,EAAKO,UAAU,uBACrBnD,OAAQ,CAAE0G,OAAQ,EAAK3E,QAAQU,SAASgC,GAAU,MAAQ,YA9KzD,IAiLW+B,IAVXA,EAAI,EAAGA,EAAIJ,EAAQ9D,OAAQkE,IAAM,EAAjCA,GAaTC,YAAW,WACT9G,IACGsG,IAAIE,GACJjG,KACCP,IAAMuG,QAAO,WAA0B,IAAD,uBAArBU,EAAqB,yBAArBA,EAAqB,gBACpCA,EAAiBrE,SAAQ,SAACpC,GACxB,GAAIA,EAAS,GAAI,CACf,IAAM8D,EAAO9D,EAAS,GAAG0G,cACzB,EAAK5F,eAAegD,GAAMa,QAAU,GAEpC3E,EAASoC,SAAQ,SAACuE,GAAe,IACvBhC,EAAY,EAAK7D,eAAegD,GAAhCa,QACHA,EAAQgC,EAAUC,eACrBjC,EAAQgC,EAAUC,aAAe,CAC/BzB,KAAM,EACNJ,OAAQ,KAIR4B,EAAUE,UAAYnB,GACxBf,EAAQgC,EAAUC,aAAa7B,OAAOzB,KAAKqD,EAAU3B,YAGnDL,EAAQgC,EAAUC,aAAazB,KAAOwB,EAAU3B,aAClDL,EAAQgC,EAAUC,aAAazB,KAAOwB,EAAU3B,mBAKxD,EAAK/D,sBAAuB,MAG/Bb,OAAM,SAAC0G,GACN,EAAKzG,MACH,sKACF,EAAKY,sBAAuB,OAvNzB,IAyNNgF,EAAQ9D,QAEXmE,YAAW,WACT9G,IACGsG,IAAIU,GACJzG,KACCP,IAAMuG,QAAO,WAA0B,IAAD,uBAArBgB,EAAqB,yBAArBA,EAAqB,gBACpCA,EAAiB3E,SAAQ,SAACpC,GACxB,GAAIA,EAAS,GAAI,CACf,IAAM8D,EAAO9D,EAAS,GAAG0G,cACzB,EAAK5F,eAAegD,GAAMwB,QAAU,GAEpCtF,EAASoC,SAAQ,SAACuE,GAAe,IACvBrB,EAAY,EAAKxE,eAAegD,GAAhCwB,QACHA,EAAQqB,EAAUC,eACrBtB,EAAQqB,EAAUC,aAAe,CAC/BzB,KAAM,EACNJ,OAAQ,KAIR4B,EAAUE,UAAYnB,GACxBJ,EAAQqB,EAAUC,aAAa7B,OAAOzB,KAAKqD,EAAU3B,YAGnDM,EAAQqB,EAAUC,aAAazB,KAAOwB,EAAU3B,aAClDM,EAAQqB,EAAUC,aAAazB,KAAOwB,EAAU3B,mBAKxD,EAAK9D,sBAAuB,MAG/Bd,OAAM,SAAC0G,GACN,EAAKzG,MACH,sKACF,EAAKa,sBAAuB,OA9PzB,KAgQL+E,EAAQ9D,OAAS,W,sDAvOrB6E,GACR,OAAOvB,KAAK1E,MAAM6C,MAAK,SAACqD,GAAD,OAAOA,EAAEnD,OAASkD,KAAU3E,O,KA4SvD6E,YAAStG,EAAY,CACnBP,MAAO8G,IACPvF,QAASuF,IACTnG,QAASmG,IACTlG,qBAAsBkG,IACtBjG,qBAAsBiG,IACtB/F,cAAe+F,IACf9F,cAAe8F,IACfhG,aAAcgG,IACd5F,YAAa4F,IACb7F,cAAe6F,IACf1F,YAAa0F,IACb3F,cAAe2F,MAGFvG,QCvVFwG,EAAgBC,IAAMC,cAAc,CAC/CC,UAAW,IAAI3G,ICwHF4G,EAxHHC,aAAS,WAAO,IAClBF,ECFqBF,IAAMK,WAAWN,GDEtCG,UAEFI,EAAgB,SAACC,GACrB,IAAIC,EAAQ,QAcZ,OAbc,MAAVD,EACFC,EAAQ,UACCD,GAAS,IAAMA,EAAQ,IAChCC,EAAQ,UACCD,GAAS,IAAMA,EAAQ,GAChCC,EAAQ,UACCD,GAAS,IAAMA,EAAQ,GAChCC,EAAQ,UACCD,GAAS,IAAMA,EAAQ,GAChCC,EAAQ,UACCD,GAAS,GAAKA,EAAQ,KAC/BC,EAAQ,WAEHA,GAGHC,EAAgB,SAAC3H,GACrB,IAAM4H,EAAMR,EAAUxG,MAAM6C,MAAK,SAACnB,GAAD,OAAsB,OAAZA,EAAKJ,MAE1C7B,EAAU,CAAC,SAAU,WAC3BuH,EAAIC,WAAW5F,SAAQ,SAACuE,GACtBnG,EAAQ8C,KAAKqD,EAAU7C,SAGzB,IAAMmE,EAAO,GAuBb,OAtBA9H,EAAKiC,SAAQ,SAACkC,GACZ,IAAM4D,EAAM,CAAC5D,EAAOR,MACdkE,EAAa,GACfG,EAAM,EACNC,EAAQ,EACZL,EAAIC,WAAW5F,SAAQ,SAACuE,GACtB,IAAMiB,EAAQtD,EAAOqC,EAAUtE,IAE3BuF,GAAmB,MAAVA,IACXO,GAAOlD,OAAO2C,GACdQ,GAAS,GAEXJ,EAAW1E,KAAX,OAAgBsE,QAAhB,IAAgBA,IAAS,QAGf,IAARO,IACFD,EAAI5E,MAAM6E,EAAMC,GAAOhD,QAAQ,IAC/B4C,EAAW5F,SAAQ,SAACuE,GAAD,OAAeuB,EAAI5E,KAAKqD,MAC3CsB,EAAK3E,KAAK4E,OAKZ,2BAAOG,MAAO,CAAEC,eAAgB,aAC9B,+BACE,4BACG9H,EAAQyC,KAAI,SAACsF,GAAD,OACX,wBACEC,IAAKD,EACLF,MAAO,CACLI,QAAS,MACTC,UAAW,OACXC,WAAY,OACZC,gBAAiB,UACjBf,MAAO,QACPgB,OAAQ,oBAGTN,QAMT,+BACGN,EAAKhF,KAAI,SAACiF,GAAD,OACR,4BACGA,EAAIjF,KAAI,SAACsF,GAAD,OACP,wBAAIF,MAAO,CAAEI,QAAS,UAAWI,OAAQ,kBAAmBhB,MAAM,GAAD,OAAKF,EAAcY,MAASA,aAS3G,OACE,6BACGhB,EAAUvG,QACT,6BACE,uBAAGqH,MAAO,CAAES,OAAQ,QAApB,8EACCvB,EAAUlG,cAAgB,GACzB,uBAAGgH,MAAO,CAAES,OAAQ,QAApB,oCAA2DvB,EAAUlG,cAArE,OAGkB,KAApBkG,EAAUlH,MAAV,iBACQkH,EAAUlH,OAEpB,6BACE,uBACEgI,MAAO,CAAES,OAAQ,QADnB,iHAE4GvB,EAAU5F,oBACnH0C,OACA0E,KAAK,QACR,6BACA,uBAAGV,MAAO,CAAES,OAAQ,QAApB,4CACChB,EAAcP,EAAUjG,eACzB,4CACCwG,EAAcP,EAAUhG,aACzB,uEACCuG,EAAcP,EAAU/F,eACzB,4CACCsG,EAAcP,EAAU9F,kBEzGfuH,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7J,MAAK,SAAA8J,GACJA,EAAaC,gBAEd1J,OAAM,SAAAC,GACLJ,QAAQI,MAAMA,EAAMI,c","file":"static/js/main.4de4c045.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { url } from \"constants.js\";\n\nconst client = axios.create({\n  baseURL: url,\n});\n\n/**\n * Request Wrapper with default success/error actions\n */\nconst request = function (options) {\n  const onSuccess = function (response) {\n    console.debug(\"Request Successful!\", response);\n    return response.data;\n  };\n\n  const onError = function (error) {\n    console.error(\"Request Failed:\", error.config);\n\n    // log response data if it exists\n    if (error.response) {\n      console.error(\"Status:\", error.response.status);\n      console.error(\"Data:\", error.response.data);\n      console.error(\"Headers:\", error.response.headers);\n    } else {\n      console.error(\"Error Message:\", error.message);\n    }\n\n    return Promise.reject(error.response || error.message);\n  };\n\n  // add the api_key to each request\n  options.params = { ...options.params, api_key: \"ce3902772ae4b70c973b6a9f54f844fd\" };\n\n  return client(options).then(onSuccess).catch(onError);\n};\n\nexport default request;\n","const url = 'https://classic.warcraftlogs.com:443/v1/';\n\nexport {\n    url\n};","import { decorate, observable, reaction } from \"mobx\";\nimport axios from \"axios\";\nimport request from \"services/request\";\n\nconst weekInNanoSeconds = 7 * 24 * 60 * 60 * 1000;\nconst requestDelay = 2000;\n\nclass RaidsStore {\n  raidsToGetFightsFor = [];\n  parsesByRaider = {};\n  zones = {};\n\n  loading = true;\n  loadingBracketParses = true;\n  loadingOverallParses = true;\n  loadingZones = true;\n  needToGetData = false;\n  error = \"\";\n  timeRemaining = 0;\n\n  medianBracket = [];\n  bestBracket = [];\n  medianOverall = [];\n  bestOverall = [];\n\n  healerTypes = [\"Priest\", \"Paladin\", \"Druid\"];\n  healerExclusionList = [\"Lightsaber\", \"Neku\", \"Taede\"];\n  healers = [];\n  start;\n\n  getZoneId(zoneName) {\n    return this.zones.find((z) => z.name === zoneName).id;\n  }\n\n  /**\n   * Checks local storage to see if last seen raid data is up to date.\n   * If it's up to date this returns false otherwise true.\n   */\n  isRaidDataOutOfDate = () => {\n    const lastSeenRaids = JSON.parse(localStorage.getItem(\"previousRaids\"));\n    let needToGetData = false;\n\n    if (!lastSeenRaids && this.raidsToGetFightsFor.length > 0) {\n      needToGetData = true;\n    } else {\n      this.raidsToGetFightsFor.forEach((id) => {\n        if (!lastSeenRaids.includes(id)) {\n          needToGetData = true;\n        }\n      });\n    }\n\n    return needToGetData;\n  };\n\n  /**\n   * Finds all the raids that match the supplied zone that occured in the\n   * specified timeframe.\n   * @param {array<object>} raids - the collection of all raids\n   * @param {string} zone - raids matching this zone\n   * @param {number} timeFrameInWeeks - number of weeks to look for raid data in\n   */\n  findRaids = (raids, zone, timeFrameInWeeks) => {\n    return raids\n      .filter(\n        (raid) => raid.start > Date.now() - timeFrameInWeeks * weekInNanoSeconds && raid.zone === this.getZoneId(zone)\n      )\n      .map((raid) => raid.id);\n  };\n\n  /**\n   * Finds all the raiders from the collection of raid responses\n   * @param {array<object>} responses - array of multiple server responses\n   */\n  findRaiders = (responses) => {\n    const raidFights = [];\n    this.raids.forEach((raid) => {\n      responses.forEach((response) => {\n        if (raid.start === response.start && raid.title === response.title) {\n          raidFights.push(response);\n        }\n      });\n    });\n\n    raidFights.forEach((fight) => {\n      fight.exportedCharacters.forEach((char) => {\n        const friendlyData = fight.friendlies.find((e) => e.name === char.name);\n        if (\n          this.healerTypes.includes(friendlyData.type) &&\n          !this.healerExclusionList.includes(friendlyData.name) &&\n          !this.healers.includes(friendlyData.name)\n        ) {\n          this.healers.push(friendlyData.name);\n        }\n        this.parsesByRaider[char.name] = {};\n      });\n    });\n  };\n\n  constructor() {\n    this.parsesByRaider = JSON.parse(localStorage.getItem(\"parsesByRaider\")) ?? {};\n\n    this.start = Date.now();\n    const parseCutoff = this.start - 6 * weekInNanoSeconds;\n\n    request({ url: \"/zones\" }).then((response) => {\n      this.zones = response;\n      this.loadingZones = false;\n    });\n\n    // once we have zone data\n    reaction(\n      () => this.loadingZones,\n      () => {\n        request({\n          url: \"/reports/guild/RIVAL/Fairbanks/US\",\n        }).then((response) => {\n          this.raids = response;\n          this.raidsToGetFightsFor = this.findRaids(response, \"Temple of Ahn'Qiraj\", 4);\n          this.needToGetData = this.isRaidDataOutOfDate();\n\n          if (!this.needToGetData) {\n            this.loadingBracketParses = false;\n            this.loadingOverallParses = false;\n          }\n        });\n      }\n    );\n\n    // if raid data needs to be grabbed\n    reaction(\n      () => this.needToGetData,\n      () => {\n        const requests = [];\n        this.raidsToGetFightsFor.forEach((raidId) => {\n          requests.push(request({ url: `/report/fights/${raidId}` }));\n        });\n\n        axios.all(requests).then(\n          axios.spread((...responses) => {\n            this.findRaiders(responses);\n\n            //send parse requests for bracket parses delayed between each other to prevent api lockout\n            const bracketRequests = [];\n            const raiders = Object.keys(this.parsesByRaider);\n\n            const secondsRemaining = Math.floor(((raiders.length + 3) * requestDelay) / 1000);\n            this.timeRemaining = secondsRemaining;\n\n            for (let i = 0; i < secondsRemaining; i++) {\n              setTimeout(() => {\n                this.timeRemaining = this.timeRemaining - 1;\n              }, i * 1000);\n            }\n\n            for (let i = 0; i < raiders.length; i++) {\n              setTimeout(() => {\n                const raider = raiders[i];\n                bracketRequests.push(\n                  request({\n                    url: `/parses/character/${raider}/Fairbanks/US`,\n                    params: {\n                      bracket: -1,\n                      zone: this.getZoneId(\"Temple of Ahn'Qiraj\"),\n                      metric: this.healers.includes(raiders[0]) ? \"hps\" : \"dps\",\n                    },\n                  })\n                );\n              }, requestDelay * i);\n            }\n\n            const overallRequests = [];\n            for (let i = 0; i < raiders.length; i++) {\n              setTimeout(() => {\n                const raider = raiders[i];\n                overallRequests.push(\n                  request({\n                    url: `/parses/character/${raider}/Fairbanks/US`,\n                    zone: this.getZoneId(\"Temple of Ahn'Qiraj\"),\n                    params: { metric: this.healers.includes(raider) ? \"hps\" : \"dps\" },\n                  })\n                );\n              }, requestDelay * i);\n            }\n\n            setTimeout(() => {\n              axios\n                .all(bracketRequests)\n                .then(\n                  axios.spread((...bracketResponses) => {\n                    bracketResponses.forEach((response) => {\n                      if (response[0]) {\n                        const name = response[0].characterName;\n                        this.parsesByRaider[name].bracket = {};\n\n                        response.forEach((encounter) => {\n                          const { bracket } = this.parsesByRaider[name];\n                          if (!bracket[encounter.encounterID]) {\n                            bracket[encounter.encounterID] = {\n                              best: 0,\n                              parses: [],\n                            };\n                          }\n\n                          if (encounter.startTime > parseCutoff) {\n                            bracket[encounter.encounterID].parses.push(encounter.percentile);\n                          }\n\n                          if (bracket[encounter.encounterID].best < encounter.percentile) {\n                            bracket[encounter.encounterID].best = encounter.percentile;\n                          }\n                        });\n                      }\n                    });\n                    this.loadingBracketParses = false;\n                  })\n                )\n                .catch((errors) => {\n                  this.error =\n                    \"There were too many requests made recently to WarcraftLogs. Try again in like 10 minutes to allow my api key to becoming unlocked and then try re-loading the page.\";\n                  this.loadingBracketParses = false;\n                });\n            }, raiders.length * requestDelay);\n\n            setTimeout(() => {\n              axios\n                .all(overallRequests)\n                .then(\n                  axios.spread((...overallResponses) => {\n                    overallResponses.forEach((response) => {\n                      if (response[0]) {\n                        const name = response[0].characterName;\n                        this.parsesByRaider[name].overall = {};\n\n                        response.forEach((encounter) => {\n                          const { overall } = this.parsesByRaider[name];\n                          if (!overall[encounter.encounterID]) {\n                            overall[encounter.encounterID] = {\n                              best: 0,\n                              parses: [],\n                            };\n                          }\n\n                          if (encounter.startTime > parseCutoff) {\n                            overall[encounter.encounterID].parses.push(encounter.percentile);\n                          }\n\n                          if (overall[encounter.encounterID].best < encounter.percentile) {\n                            overall[encounter.encounterID].best = encounter.percentile;\n                          }\n                        });\n                      }\n                    });\n                    this.loadingOverallParses = false;\n                  })\n                )\n                .catch((errors) => {\n                  this.error =\n                    \"There were too many requests made recently to WarcraftLogs. Try again in like 10 minutes to allow my api key to becoming unlocked and then try re-loading the page.\";\n                  this.loadingOverallParses = false;\n                });\n            }, (raiders.length + 2) * requestDelay);\n          })\n        );\n      }\n    );\n  }\n\n  updateWhenFinished = reaction(\n    () => this.loadingBracketParses || this.loadingOverallParses || this.loadingZones,\n    () => {\n      if (!this.loadingBracketParses && !this.loadingOverallParses && !this.loadingZones) {\n        console.log(`done loading, time elapsed: ${(Date.now() - this.start) / 1000}s`);\n\n        const raiders = Object.keys(this.parsesByRaider).sort();\n        raiders.forEach((raider) => {\n          const bestBracketRow = { name: raider };\n          const medianBracketRow = { name: raider };\n          const bestOverallRow = { name: raider };\n          const medianOverallRow = { name: raider };\n\n          const { bracket } = this.parsesByRaider[raider];\n          if (bracket) {\n            Object.keys(bracket).forEach((bossKey) => {\n              const boss = bracket[bossKey];\n              let average = 0;\n              boss.parses.forEach((percentile) => {\n                average += percentile;\n              });\n              average /= boss.parses.length;\n              bestBracketRow[bossKey] = Number.isInteger(boss.best) ? boss.best : boss.best.toFixed(2);\n              medianBracketRow[bossKey] = Number.isNaN(average)\n                ? \"-\"\n                : Number.isInteger(average)\n                ? average\n                : average.toFixed(2);\n            });\n          }\n\n          const { overall } = this.parsesByRaider[raider];\n          if (overall) {\n            Object.keys(overall).forEach((bossKey) => {\n              const boss = overall[bossKey];\n              let average = 0;\n              boss.parses.forEach((percentile) => {\n                average += percentile;\n              });\n              average /= boss.parses.length;\n              bestOverallRow[bossKey] = Number.isInteger(boss.best) ? boss.best : boss.best.toFixed(2);\n              medianOverallRow[bossKey] = Number.isNaN(average)\n                ? \"-\"\n                : Number.isInteger(average)\n                ? average\n                : average.toFixed(2);\n            });\n          }\n\n          this.bestBracket.push(bestBracketRow);\n          this.medianBracket.push(medianBracketRow);\n          this.bestOverall.push(bestOverallRow);\n          this.medianOverall.push(medianOverallRow);\n        });\n\n        this.loading = false;\n        localStorage.setItem(\"previousRaids\", JSON.stringify(this.raidsToGetFightsFor));\n        localStorage.setItem(\"parsesByRaider\", JSON.stringify(this.parsesByRaider));\n      }\n    }\n  );\n}\n\ndecorate(RaidsStore, {\n  error: observable,\n  healers: observable,\n  loading: observable,\n  loadingBracketParses: observable,\n  loadingOverallParses: observable,\n  needToGetData: observable,\n  timeRemaining: observable,\n  loadingZones: observable,\n  bestBracket: observable,\n  medianBracket: observable,\n  bestOverall: observable,\n  medianOverall: observable,\n});\n\nexport default RaidsStore;\n","import React from \"react\";\nimport RaidsStore from \"./raidsStore\";\n\nexport const storesContext = React.createContext({\n  raidStore: new RaidsStore(),\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { useStores } from \"hooks/useStores\";\n\nconst App = observer(() => {\n  const { raidStore } = useStores();\n\n  const getParseColor = (value) => {\n    let color = \"black\";\n    if (value === 100) {\n      color = \"#F4D03F\";\n    } else if (value >= 95 && value < 100) {\n      color = \"#F39C12\";\n    } else if (value >= 75 && value < 95) {\n      color = \"#8E44AD\";\n    } else if (value >= 50 && value < 75) {\n      color = \"#3498DB\";\n    } else if (value >= 25 && value < 50) {\n      color = \"#2ECC71\";\n    } else if (value >= 0 && value < 25) {\n      color = \"#BDC3C7\";\n    }\n    return color;\n  };\n\n  const generateTable = (data) => {\n    const bwl = raidStore.zones.find((zone) => zone.id === 1002);\n    // generate header row\n    const headers = [\"Raider\", \"Average\"];\n    bwl.encounters.forEach((encounter) => {\n      headers.push(encounter.name);\n    });\n\n    const rows = [];\n    data.forEach((raider) => {\n      const row = [raider.name];\n      const encounters = [];\n      let avg = 0;\n      let count = 0;\n      bwl.encounters.forEach((encounter) => {\n        const value = raider[encounter.id];\n\n        if (value && value !== \"-\") {\n          avg += Number(value);\n          count += 1;\n        }\n        encounters.push(value ?? \"-\");\n      });\n\n      if (avg !== 0) {\n        row.push((avg / count).toFixed(2));\n        encounters.forEach((encounter) => row.push(encounter));\n        rows.push(row);\n      }\n    });\n\n    return (\n      <table style={{ borderCollapse: \"collapse\" }}>\n        <thead>\n          <tr>\n            {headers.map((d) => (\n              <th\n                key={d}\n                style={{\n                  padding: \"5px\",\n                  textAlign: \"left\",\n                  fontWeight: \"bold\",\n                  backgroundColor: \"#5D6D7E\",\n                  color: \"white\",\n                  border: \"1px solid black\",\n                }}\n              >\n                {d}\n              </th>\n            ))}\n          </tr>\n        </thead>\n\n        <tbody>\n          {rows.map((row) => (\n            <tr>\n              {row.map((d) => (\n                <td style={{ padding: \"0px 5px\", border: \"1px solid black\", color: `${getParseColor(d)}` }}>{d}</td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  };\n\n  return (\n    <div>\n      {raidStore.loading ? (\n        <div>\n          <p style={{ margin: \"5px\" }}>Due to WarcraftLog's API request limit, loading will take about 2 minutes.</p>\n          {raidStore.timeRemaining > 0 && (\n            <p style={{ margin: \"5px\" }}>{`Estimated time remaining: ${raidStore.timeRemaining}s`}</p>\n          )}\n        </div>\n      ) : raidStore.error !== \"\" ? (\n        `ERROR: ${raidStore.error}`\n      ) : (\n        <div>\n          <p\n            style={{ margin: \"5px\" }}\n          >{`Druids, Paladins, and Priests have healing parses pulled. The following people are excluded from that: ${raidStore.healerExclusionList\n            .sort()\n            .join(\", \")}`}</p>\n          <br />\n          <p style={{ margin: \"5px\" }}>Median Bracket (last 6 weeks of parses):</p>\n          {generateTable(raidStore.medianBracket)}\n          <p>Best Bracket:</p>\n          {generateTable(raidStore.bestBracket)}\n          <p>Median Overall (last 6 weeks of parses):</p>\n          {generateTable(raidStore.medianOverall)}\n          <p>Best Overall:</p>\n          {generateTable(raidStore.bestOverall)}\n        </div>\n      )}\n    </div>\n  );\n});\n\nexport default App;\n","import React from 'react'\nimport { storesContext } from 'stores'\n\nexport const useStores = () => React.useContext(storesContext);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}