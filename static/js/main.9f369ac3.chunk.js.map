{"version":3,"sources":["services/request.js","constants.js","stores/raidsStore.js","stores/index.js","App.js","hooks/useStores.jsx","serviceWorker.js","index.js"],"names":["client","axios","create","baseURL","request","options","params","api_key","then","response","console","debug","data","catch","error","config","status","headers","message","Promise","reject","RaidsStore","raidsToGetFightsFor","parsesByRaider","zones","loading","loadingBracketParses","loadingOverallParses","loadingZones","needToGetData","timeRemaining","medianBracket","bestBracket","medianOverall","bestOverall","healerTypes","healerExclusionList","healers","isRaidDataOutOfDate","lastSeenRaids","JSON","parse","localStorage","getItem","length","forEach","id","includes","findRaids","raids","zone","timeFrameInWeeks","filter","raid","start","Date","now","getZoneId","map","findRaiders","responses","raidFights","title","push","fight","exportedCharacters","char","friendlyData","friendlies","find","e","name","type","handleParseRequests","requests","raiders","loadingVariableName","parseCutoff","setTimeout","all","spread","characterName","encounter","parses","encounterID","numberOfEncounters","best","startTime","percentile","updateWhenFinished","reaction","log","Object","keys","sort","raider","bestBracketRow","medianBracketRow","bestOverallRow","medianOverallRow","bracket","bossKey","boss","average","Number","isInteger","toFixed","isNaN","overall","setItem","stringify","this","url","raidId","bracketRequests","secondsRemaining","Math","floor","i","metric","overallRequests","zoneName","z","partitions","decorate","observable","storesContext","React","createContext","raidStore","App","observer","useContext","getParseColor","value","color","generateTable","getZone","encounters","rows","row","avg","count","style","borderCollapse","margin","d","key","padding","textAlign","fontWeight","backgroundColor","border","getPartitionName","join","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9f369ac3.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { url } from \"constants.js\";\n\nconst client = axios.create({\n  baseURL: url,\n});\n\n/**\n * Request Wrapper with default success/error actions\n */\nconst request = function (options) {\n  const onSuccess = function (response) {\n    console.debug(\"Request Successful!\", response);\n    return response.data;\n  };\n\n  const onError = function (error) {\n    console.error(\"Request Failed:\", error.config);\n\n    // log response data if it exists\n    if (error.response) {\n      console.error(\"Status:\", error.response.status);\n      console.error(\"Data:\", error.response.data);\n      console.error(\"Headers:\", error.response.headers);\n    } else {\n      console.error(\"Error Message:\", error.message);\n    }\n\n    return Promise.reject(error.response || error.message);\n  };\n\n  // add the api_key to each request\n  options.params = { ...options.params, api_key: \"ce3902772ae4b70c973b6a9f54f844fd\" };\n\n  return client(options).then(onSuccess).catch(onError);\n};\n\nexport default request;\n","const url = 'https://classic.warcraftlogs.com:443/v1/';\n\nexport {\n    url\n};","import { decorate, observable, reaction } from \"mobx\";\nimport axios from \"axios\";\nimport request from \"services/request\";\n\nconst weekInNanoSeconds = 7 * 24 * 60 * 60 * 1000;\nconst requestDelay = 2000;\n//const zoneToGatherParsesFrom = \"Temple of Ahn'Qiraj\";\nconst zoneToGatherParsesFrom = \"Blackwing Lair\";\nconst apiError =\n  \"There were too many requests made recently to WarcraftLogs. Try again in like 10 minutes to allow my api key to becoming unlocked and then try re-loading the page.\";\nconst partition = 2;\n\nclass RaidsStore {\n  raidsToGetFightsFor = [];\n  parsesByRaider = {};\n  zones = {};\n\n  loading = true;\n  loadingBracketParses = true;\n  loadingOverallParses = true;\n  loadingZones = true;\n  needToGetData = false;\n  error = \"\";\n  timeRemaining = 0;\n\n  medianBracket = [];\n  bestBracket = [];\n  medianOverall = [];\n  bestOverall = [];\n\n  healerTypes = [\"Priest\", \"Paladin\", \"Druid\"];\n  healerExclusionList = [\"Lightsaber\", \"Neku\", \"Taede\"];\n  healers = [];\n  start;\n\n  getZoneId(zoneName) {\n    return this.zones.find((z) => z.name === zoneName).id;\n  }\n\n  getZone() {\n    return this.zones.find((z) => z.name === zoneToGatherParsesFrom);\n  }\n\n  getPartitionName() {\n    return this.zones.find((z) => z.name === zoneToGatherParsesFrom).partitions[partition].name;\n  }\n\n  /**\n   * Checks local storage to see if last seen raid data is up to date.\n   * If it's up to date this returns false otherwise true.\n   */\n  isRaidDataOutOfDate = () => {\n    const lastSeenRaids = JSON.parse(localStorage.getItem(\"previousRaids\"));\n    let needToGetData = false;\n\n    if (!lastSeenRaids && this.raidsToGetFightsFor.length > 0) {\n      needToGetData = true;\n    } else {\n      this.raidsToGetFightsFor.forEach((id) => {\n        if (!lastSeenRaids.includes(id)) {\n          needToGetData = true;\n        }\n      });\n    }\n\n    return needToGetData;\n  };\n\n  /**\n   * Finds all the raids that match the supplied zone that occured in the\n   * specified timeframe.\n   * @param {array<object>} raids - the collection of all raids\n   * @param {string} zone - raids matching this zone\n   * @param {number} timeFrameInWeeks - number of weeks to look for raid data in\n   */\n  findRaids = (raids, zone, timeFrameInWeeks) => {\n    return raids\n      .filter(\n        (raid) => raid.start > Date.now() - timeFrameInWeeks * weekInNanoSeconds && raid.zone === this.getZoneId(zone)\n      )\n      .map((raid) => raid.id);\n  };\n\n  /**\n   * Finds all the raiders from the collection of raid responses\n   * @param {array<object>} responses - array of multiple server responses\n   */\n  findRaiders = (responses) => {\n    const raidFights = [];\n    this.raids.forEach((raid) => {\n      responses.forEach((response) => {\n        if (raid.start === response.start && raid.title === response.title) {\n          raidFights.push(response);\n        }\n      });\n    });\n\n    raidFights.forEach((fight) => {\n      fight.exportedCharacters.forEach((char) => {\n        const friendlyData = fight.friendlies.find((e) => e.name === char.name);\n        if (\n          this.healerTypes.includes(friendlyData.type) &&\n          !this.healerExclusionList.includes(friendlyData.name) &&\n          !this.healers.includes(friendlyData.name)\n        ) {\n          this.healers.push(friendlyData.name);\n        }\n        this.parsesByRaider[char.name] = {};\n      });\n    });\n  };\n\n  handleParseRequests = (requests, raiders, type, loadingVariableName) => {\n    const parseCutoff = this.start - 6 * weekInNanoSeconds;\n\n    setTimeout(() => {\n      axios\n        .all(requests)\n        .then(\n          axios.spread((...responses) => {\n            responses.forEach((response) => {\n              if (response[0]) {\n                const name = response[0].characterName;\n                this.parsesByRaider[name][type] = {};\n\n                response.forEach((encounter) => {\n                  const parses = this.parsesByRaider[name][type];\n                  if (!parses[encounter.encounterID]) {\n                    parses[encounter.encounterID] = {\n                      numberOfEncounters: 0,\n                      best: 0,\n                      parses: [],\n                    };\n                  }\n\n                  if (encounter.startTime > parseCutoff) {\n                    parses[encounter.encounterID].numberOfEncounters += 1;\n                    parses[encounter.encounterID].parses.push(encounter.percentile);\n                  }\n\n                  if (parses[encounter.encounterID].best < encounter.percentile) {\n                    parses[encounter.encounterID].best = encounter.percentile;\n                  }\n                });\n              }\n            });\n            this[loadingVariableName] = false;\n          })\n        )\n        .catch(() => {\n          this.error = apiError;\n          this[loadingVariableName] = false;\n        });\n    }, (raiders.length + 2) * requestDelay);\n  };\n\n  constructor() {\n    this.parsesByRaider = JSON.parse(localStorage.getItem(\"parsesByRaider\")) ?? {};\n\n    this.start = Date.now();\n\n    request({ url: \"/zones\" }).then((response) => {\n      this.zones = response;\n      this.loadingZones = false;\n    });\n\n    // once we have zone data\n    reaction(\n      () => this.loadingZones,\n      () => {\n        request({\n          url: \"/reports/guild/RIVAL/Fairbanks/US\",\n        }).then((response) => {\n          this.raids = response;\n          this.raidsToGetFightsFor = this.findRaids(response, zoneToGatherParsesFrom, 4);\n          this.needToGetData = this.isRaidDataOutOfDate();\n\n          if (!this.needToGetData) {\n            this.loadingBracketParses = false;\n            this.loadingOverallParses = false;\n          }\n        });\n      }\n    );\n\n    // if raid data needs to be grabbed\n    reaction(\n      () => this.needToGetData,\n      () => {\n        const requests = [];\n        this.raidsToGetFightsFor.forEach((raidId) => {\n          requests.push(request({ url: `/report/fights/${raidId}` }));\n        });\n\n        axios.all(requests).then(\n          axios.spread((...responses) => {\n            this.findRaiders(responses);\n\n            //send parse requests for bracket parses delayed between each other to prevent api lockout\n            const bracketRequests = [];\n            const raiders = Object.keys(this.parsesByRaider);\n\n            const secondsRemaining = Math.floor(((raiders.length + 3) * requestDelay) / 1000);\n            this.timeRemaining = secondsRemaining;\n\n            for (let i = 0; i < secondsRemaining; i++) {\n              setTimeout(() => {\n                this.timeRemaining = this.timeRemaining - 1;\n              }, i * 1000);\n            }\n\n            for (let i = 0; i < raiders.length; i++) {\n              setTimeout(() => {\n                const raider = raiders[i];\n                bracketRequests.push(\n                  request({\n                    url: `/parses/character/${raider}/Fairbanks/US`,\n                    params: {\n                      bracket: -1,\n                      zone: this.getZoneId(zoneToGatherParsesFrom),\n                      metric: this.healers.includes(raiders[0]) ? \"hps\" : \"dps\",\n                    },\n                  })\n                );\n              }, requestDelay * i);\n            }\n\n            const overallRequests = [];\n            for (let i = 0; i < raiders.length; i++) {\n              setTimeout(() => {\n                const raider = raiders[i];\n                overallRequests.push(\n                  request({\n                    url: `/parses/character/${raider}/Fairbanks/US`,\n                    zone: this.getZoneId(zoneToGatherParsesFrom),\n\n                    params: { metric: this.healers.includes(raider) ? \"hps\" : \"dps\" },\n                  })\n                );\n              }, requestDelay * i);\n            }\n\n            this.handleParseRequests(bracketRequests, raiders, \"bracket\", \"loadingBracketParses\");\n            this.handleParseRequests(overallRequests, raiders, \"overall\", \"loadingOverallParses\");\n          })\n        );\n      }\n    );\n  }\n\n  updateWhenFinished = reaction(\n    () => this.loadingBracketParses || this.loadingOverallParses || this.loadingZones,\n    () => {\n      if (!this.loadingBracketParses && !this.loadingOverallParses && !this.loadingZones) {\n        console.log(`done loading, time elapsed: ${(Date.now() - this.start) / 1000}s`);\n\n        const raiders = Object.keys(this.parsesByRaider).sort();\n        raiders.forEach((raider) => {\n          const bestBracketRow = { name: raider };\n          const medianBracketRow = { name: raider };\n          const bestOverallRow = { name: raider };\n          const medianOverallRow = { name: raider };\n\n          const { bracket } = this.parsesByRaider[raider];\n          if (bracket) {\n            Object.keys(bracket).forEach((bossKey) => {\n              const boss = bracket[bossKey];\n              let average = 0;\n              boss.parses.forEach((percentile) => {\n                average += percentile;\n              });\n              average /= boss.parses.length;\n              bestBracketRow[bossKey] = Number.isInteger(boss.best) ? boss.best : boss.best.toFixed(2);\n              medianBracketRow[bossKey] = Number.isNaN(average)\n                ? \"-\"\n                : Number.isInteger(average)\n                ? average\n                : average.toFixed(2);\n            });\n          }\n\n          const { overall } = this.parsesByRaider[raider];\n          if (overall) {\n            Object.keys(overall).forEach((bossKey) => {\n              const boss = overall[bossKey];\n              let average = 0;\n              boss.parses.forEach((percentile) => {\n                average += percentile;\n              });\n              average /= boss.parses.length;\n              bestOverallRow[bossKey] = Number.isInteger(boss.best) ? boss.best : boss.best.toFixed(2);\n              medianOverallRow[bossKey] = Number.isNaN(average)\n                ? \"-\"\n                : Number.isInteger(average)\n                ? average\n                : average.toFixed(2);\n            });\n          }\n\n          this.bestBracket.push(bestBracketRow);\n          this.medianBracket.push(medianBracketRow);\n          this.bestOverall.push(bestOverallRow);\n          this.medianOverall.push(medianOverallRow);\n        });\n\n        this.loading = false;\n        localStorage.setItem(\"previousRaids\", JSON.stringify(this.raidsToGetFightsFor));\n        localStorage.setItem(\"parsesByRaider\", JSON.stringify(this.parsesByRaider));\n      }\n    }\n  );\n}\n\ndecorate(RaidsStore, {\n  error: observable,\n  healers: observable,\n  loading: observable,\n  loadingBracketParses: observable,\n  loadingOverallParses: observable,\n  needToGetData: observable,\n  timeRemaining: observable,\n  loadingZones: observable,\n  bestBracket: observable,\n  medianBracket: observable,\n  bestOverall: observable,\n  medianOverall: observable,\n});\n\nexport default RaidsStore;\n","import React from \"react\";\nimport RaidsStore from \"./raidsStore\";\n\nexport const storesContext = React.createContext({\n  raidStore: new RaidsStore(),\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { useStores } from \"hooks/useStores\";\n\nconst App = observer(() => {\n  const { raidStore } = useStores();\n\n  const getParseColor = (value) => {\n    let color = \"black\";\n    if (value === 100) {\n      color = \"#F4D03F\";\n    } else if (value >= 95 && value < 100) {\n      color = \"#F39C12\";\n    } else if (value >= 75 && value < 95) {\n      color = \"#8E44AD\";\n    } else if (value >= 50 && value < 75) {\n      color = \"#3498DB\";\n    } else if (value >= 25 && value < 50) {\n      color = \"#2ECC71\";\n    } else if (value >= 0 && value < 25) {\n      color = \"#BDC3C7\";\n    }\n    return color;\n  };\n\n  const generateTable = (data) => {\n    const zone = raidStore.getZone();\n\n    // generate header row\n    const headers = [\"Raider\", \"Average\"];\n    zone.encounters.forEach((encounter) => {\n      headers.push(encounter.name);\n    });\n\n    const rows = [];\n    data.forEach((raider) => {\n      const row = [raider.name];\n      const encounters = [];\n      let avg = 0;\n      let count = 0;\n      zone.encounters.forEach((encounter) => {\n        const value = raider[encounter.id] ?? \"-\";\n\n        if (value && value !== \"-\") {\n          avg += Number(value);\n          count += 1;\n        }\n\n        encounters.push(value);\n      });\n\n      if (avg !== 0) {\n        row.push((avg / count).toFixed(2));\n      } else {\n        row.push(\"-\");\n      }\n\n      encounters.forEach((encounter) => row.push(encounter));\n      rows.push(row);\n    });\n\n    return (\n      <table style={{ borderCollapse: \"collapse\", margin: \"3px 5px\" }}>\n        <thead>\n          <tr>\n            {headers.map((d) => (\n              <th\n                key={d}\n                style={{\n                  padding: \"5px\",\n                  textAlign: \"left\",\n                  fontWeight: \"bold\",\n                  backgroundColor: \"#5D6D7E\",\n                  color: \"white\",\n                  border: \"1px solid black\",\n                }}\n              >\n                {d}\n              </th>\n            ))}\n          </tr>\n        </thead>\n\n        <tbody>\n          {rows.map((row) => (\n            <tr>\n              {row.map((d) => (\n                <td style={{ padding: \"0px 5px\", border: \"1px solid black\", color: `${getParseColor(d)}` }}>{d}</td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  };\n\n  return (\n    <div>\n      {raidStore.loading ? (\n        <div>\n          <p style={{ margin: \"5px\" }}>Due to WarcraftLog's API request limit, loading will take about 2 minutes.</p>\n          {raidStore.timeRemaining > 0 && (\n            <p style={{ margin: \"5px\" }}>{`Estimated time remaining: ${raidStore.timeRemaining}s`}</p>\n          )}\n        </div>\n      ) : raidStore.error !== \"\" ? (\n        `ERROR: ${raidStore.error}`\n      ) : (\n        <div>\n          <p style={{ margin: \"5px 0px 5px 5px\" }}>\n            <b>Zone:</b>\n            {` ${raidStore.getZone().name}`}\n          </p>\n          <p style={{ margin: \"0px 5px\" }}>\n            <b>Partition:</b>\n            {` ${raidStore.getPartitionName()}`}\n          </p>\n          <p style={{ margin: \"5px\" }}>\n            <b>Details:</b>\n            {` Druids, Paladins, and Priests have healing parses pulled. The following people are excluded from that: ${raidStore.healerExclusionList\n              .sort()\n              .join(\", \")}`}\n          </p>\n          <p style={{ margin: \"15px 5px 7px 5px\" }}>\n            <b>Median Bracket:</b>\n          </p>\n          {generateTable(raidStore.medianBracket)}\n          <p style={{ margin: \"7px 5px\" }}>\n            <b>Best Bracket:</b>\n          </p>\n          {generateTable(raidStore.bestBracket)}\n          <p style={{ margin: \"7px 5px\" }}>\n            <b>Median Overall:</b>\n          </p>\n          {generateTable(raidStore.medianOverall)}\n          <p style={{ margin: \"7px 5px\" }}>\n            <b>Best Overall:</b>\n          </p>\n          {generateTable(raidStore.bestOverall)}\n        </div>\n      )}\n    </div>\n  );\n});\n\nexport default App;\n","import React from 'react'\nimport { storesContext } from 'stores'\n\nexport const useStores = () => React.useContext(storesContext);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}