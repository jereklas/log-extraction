{"version":3,"sources":["services/request.js","constants.js","stores/raidsStore.js","stores/index.js","App.js","hooks/useStores.jsx","serviceWorker.js","index.js"],"names":["client","axios","create","baseURL","request","options","params","api_key","then","response","console","debug","data","catch","error","config","status","headers","message","Promise","reject","RaidsStore","raidsToGetFightsFor","parsesByRaider","zones","loading","loadingBracketParses","loadingOverallParses","loadingZones","timeRemaining","medianBracket","bestBracket","medianOverall","bestOverall","healers","updateWhenFinished","reaction","end","Date","now","log","start","Object","keys","sort","forEach","raider","bestBracketRow","name","medianBracketRow","bestOverallRow","medianOverallRow","bracket","bossKey","boss","average","parses","percentile","length","Number","isInteger","best","toFixed","overall","push","localStorage","setItem","JSON","stringify","previouslyGrabbedRaids","parse","getItem","this","raidCutoff","weeks","parseCutoff","url","raidsById","values","raid","dayOfWeek","getDay","id","zone","needToGetData","includes","requests","raidId","all","spread","responses","fightsToGetRaidersFrom","title","fight","exportedCharacters","char","bracketRequests","raiders","secondsRemaining","Math","floor","i","setTimeout","metric","overallRequests","bracketResponses","characterName","encounter","encounterID","startTime","errors","overallResponses","decorate","observable","storesContext","React","createContext","raidStore","App","observer","useContext","getParseColor","value","color","generateTable","bwl","find","encounters","rows","row","avg","count","style","borderCollapse","map","d","key","padding","textAlign","fontWeight","backgroundColor","border","margin","width","join","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.41544ee5.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { url } from \"constants.js\";\n\nconst client = axios.create({\n  baseURL: url,\n});\n\n/**\n * Request Wrapper with default success/error actions\n */\nconst request = function (options) {\n  const onSuccess = function (response) {\n    console.debug(\"Request Successful!\", response);\n    return response.data;\n  };\n\n  const onError = function (error) {\n    console.error(\"Request Failed:\", error.config);\n\n    // log response data if it exists\n    if (error.response) {\n      console.error(\"Status:\", error.response.status);\n      console.error(\"Data:\", error.response.data);\n      console.error(\"Headers:\", error.response.headers);\n    } else {\n      console.error(\"Error Message:\", error.message);\n    }\n\n    return Promise.reject(error.response || error.message);\n  };\n\n  // add the api_key to each request\n  options.params = { ...options.params, api_key: \"ce3902772ae4b70c973b6a9f54f844fd\" };\n\n  return client(options).then(onSuccess).catch(onError);\n};\n\nexport default request;\n","const url = 'https://classic.warcraftlogs.com:443/v1/';\n\nexport {\n    url\n};","import { decorate, observable, reaction } from \"mobx\";\nimport axios from \"axios\";\nimport request from \"services/request\";\n\nconst weekInNanoSeconds = 7 * 24 * 60 * 60 * 1000;\nconst Wednesday = 3;\nconst Thursday = 4;\nconst weeks = 4;\nconst requestDelay = 2000;\n\nclass RaidsStore {\n  raidsToGetFightsFor = [];\n  parsesByRaider = {};\n  zones = {};\n\n  loading = true;\n  loadingBracketParses = true;\n  loadingOverallParses = true;\n  loadingZones = true;\n  error = \"\";\n  timeRemaining = 0;\n\n  medianBracket = [];\n  bestBracket = [];\n  medianOverall = [];\n  bestOverall = [];\n\n  healers = [\n    \"Aemon\",\n    \"Amonmin\",\n    \"Dabaslab\",\n    \"Doublebubble\",\n    \"Jaidan\",\n    \"Jerico\",\n    \"Naglepally\",\n    \"Rodney\",\n    \"Sarianne\",\n    \"Egstric\",\n    \"Erelis\",\n    \"Vaportrail\",\n  ];\n  start;\n  end;\n\n  constructor() {\n    const previouslyGrabbedRaids = JSON.parse(localStorage.getItem(\"raids\")) ?? [];\n    this.parsesByRaider = JSON.parse(localStorage.getItem(\"parses\")) ?? {};\n\n    this.start = Date.now();\n    const raidCutoff = this.start - weeks * weekInNanoSeconds;\n    const parseCutoff = this.start - 6 * weekInNanoSeconds;\n\n    request({ url: \"/zones\" }).then((response) => {\n      this.zones = response;\n      this.loadingZones = false;\n    });\n\n    request({\n      url: \"/reports/guild/RIVAL/Fairbanks/US\",\n    }).then((response) => {\n      const raidsById = {};\n\n      Object.values(response).forEach((raid) => {\n        const duration = raid.end - raid.start;\n\n        if (duration > 0) {\n          const dayOfWeek = new Date(raid.start).getDay();\n          raidsById[raid.id] = raid;\n          if (raid.start > raidCutoff && (dayOfWeek === Wednesday || dayOfWeek === Thursday) && raid.zone === 1002) {\n            this.raidsToGetFightsFor.push(raid.id);\n          }\n        }\n      });\n\n      let needToGetData = false;\n\n      this.raidsToGetFightsFor.forEach((id) => {\n        if (!previouslyGrabbedRaids.includes(id)) {\n          needToGetData = true;\n        }\n      });\n\n      console.log(needToGetData);\n      if (needToGetData) {\n        const requests = [];\n        this.raidsToGetFightsFor.forEach((raidId) => {\n          requests.push(request({ url: `/report/fights/${raidId}` }));\n        });\n\n        axios.all(requests).then(\n          axios.spread((...responses) => {\n            const fightsToGetRaidersFrom = [];\n            Object.values(raidsById).forEach((raid) => {\n              responses.forEach((response) => {\n                if (raid.start === response.start && raid.title === response.title) {\n                  fightsToGetRaidersFrom.push(response);\n                }\n              });\n            });\n\n            fightsToGetRaidersFrom.forEach((fight) => {\n              fight.exportedCharacters.forEach((char) => {\n                this.parsesByRaider[char.name] = {};\n              });\n            });\n\n            //send parse requests for bracket parses delayed between each other to prevent api lockout\n            const bracketRequests = [];\n            const raiders = Object.keys(this.parsesByRaider);\n\n            const secondsRemaining = Math.floor(((raiders.length + 3) * requestDelay) / 1000);\n            this.timeRemaining = secondsRemaining;\n            for (let i = 0; i < secondsRemaining; i++) {\n              setTimeout(() => {\n                this.timeRemaining = this.timeRemaining - 1;\n              }, i * 1000);\n            }\n\n            for (let i = 0; i < raiders.length; i++) {\n              setTimeout(() => {\n                const raider = raiders[i];\n                bracketRequests.push(\n                  request({\n                    url: `/parses/character/${raider}/Fairbanks/US`,\n                    params: { bracket: -1, metric: this.healers.includes(raider) ? \"hps\" : \"dps\" },\n                  })\n                );\n              }, requestDelay * i);\n            }\n\n            const overallRequests = [];\n            for (let i = 0; i < raiders.length; i++) {\n              setTimeout(() => {\n                const raider = raiders[i];\n                overallRequests.push(\n                  request({\n                    url: `/parses/character/${raider}/Fairbanks/US`,\n                    params: { metric: this.healers.includes(raider) ? \"hps\" : \"dps\" },\n                  })\n                );\n              }, requestDelay * i);\n            }\n\n            setTimeout(() => {\n              axios\n                .all(bracketRequests)\n                .then(\n                  axios.spread((...bracketResponses) => {\n                    bracketResponses.forEach((response) => {\n                      if (response[0]) {\n                        const name = response[0].characterName;\n                        this.parsesByRaider[name].bracket = {};\n\n                        response.forEach((encounter) => {\n                          const { bracket } = this.parsesByRaider[name];\n                          if (!bracket[encounter.encounterID]) {\n                            bracket[encounter.encounterID] = {\n                              best: 0,\n                              parses: [],\n                            };\n                          }\n\n                          if (encounter.startTime > parseCutoff) {\n                            bracket[encounter.encounterID].parses.push(encounter.percentile);\n                          }\n\n                          if (bracket[encounter.encounterID].best < encounter.percentile) {\n                            bracket[encounter.encounterID].best = encounter.percentile;\n                          }\n                        });\n                      }\n                    });\n                    this.loadingBracketParses = false;\n                  })\n                )\n                .catch((errors) => {\n                  this.error =\n                    \"There were too many requests made recently to WarcraftLogs. Try again in like 10 minutes to allow my api key to becoming unlocked and then try re-loading the page.\";\n                  this.loadingBracketParses = false;\n                });\n            }, raiders.length * requestDelay);\n\n            setTimeout(() => {\n              axios\n                .all(overallRequests)\n                .then(\n                  axios.spread((...overallResponses) => {\n                    overallResponses.forEach((response) => {\n                      if (response[0]) {\n                        const name = response[0].characterName;\n                        this.parsesByRaider[name].overall = {};\n\n                        response.forEach((encounter) => {\n                          const { overall } = this.parsesByRaider[name];\n                          if (!overall[encounter.encounterID]) {\n                            overall[encounter.encounterID] = {\n                              best: 0,\n                              parses: [],\n                            };\n                          }\n\n                          if (encounter.startTime > parseCutoff) {\n                            overall[encounter.encounterID].parses.push(encounter.percentile);\n                          }\n\n                          if (overall[encounter.encounterID].best < encounter.percentile) {\n                            overall[encounter.encounterID].best = encounter.percentile;\n                          }\n                        });\n                      }\n                    });\n                    this.loadingOverallParses = false;\n                  })\n                )\n                .catch((errors) => {\n                  this.error =\n                    \"There were too many requests made recently to WarcraftLogs. Try again in like 10 minutes to allow my api key to becoming unlocked and then try re-loading the page.\";\n                  this.loadingOverallParses = false;\n                });\n            }, (raiders.length + 2) * requestDelay);\n          })\n        );\n      } else {\n        this.loadingBracketParses = false;\n        this.loadingOverallParses = false;\n      }\n    });\n  }\n\n  updateWhenFinished = reaction(\n    () => this.loadingBracketParses || this.loadingOverallParses || this.loadingZones,\n    () => {\n      if (!this.loadingBracketParses && !this.loadingOverallParses && !this.loadingZones) {\n        this.end = Date.now();\n        console.log(\"done loading, time elapsed: \", this.end - this.start);\n\n        const raiders = Object.keys(this.parsesByRaider).sort();\n        raiders.forEach((raider) => {\n          const bestBracketRow = { name: raider };\n          const medianBracketRow = { name: raider };\n          const bestOverallRow = { name: raider };\n          const medianOverallRow = { name: raider };\n\n          const { bracket } = this.parsesByRaider[raider];\n          if (bracket) {\n            Object.keys(bracket).forEach((bossKey) => {\n              const boss = bracket[bossKey];\n              let average = 0;\n              boss.parses.forEach((percentile) => {\n                average += percentile;\n              });\n              average /= boss.parses.length;\n              bestBracketRow[bossKey] = Number.isInteger(boss.best) ? boss.best : boss.best.toFixed(2);\n              medianBracketRow[bossKey] = Number.isInteger(average) ? average : average.toFixed(2);\n            });\n          }\n\n          const { overall } = this.parsesByRaider[raider];\n          if (overall) {\n            Object.keys(overall).forEach((bossKey) => {\n              const boss = overall[bossKey];\n              let average = 0;\n              boss.parses.forEach((percentile) => {\n                average += percentile;\n              });\n              average /= boss.parses.length;\n              bestOverallRow[bossKey] = Number.isInteger(boss.best) ? boss.best : boss.best.toFixed(2);\n              medianOverallRow[bossKey] = Number.isInteger(average) ? average : average.toFixed(2);\n            });\n          }\n\n          this.bestBracket.push(bestBracketRow);\n          this.medianBracket.push(medianBracketRow);\n          this.bestOverall.push(bestOverallRow);\n          this.medianOverall.push(medianOverallRow);\n        });\n\n        this.loading = false;\n        localStorage.setItem(\"raids\", JSON.stringify(this.raidsToGetFightsFor));\n        localStorage.setItem(\"parses\", JSON.stringify(this.parsesByRaider));\n      }\n    }\n  );\n}\n\ndecorate(RaidsStore, {\n  error: observable,\n  healers: observable,\n  loading: observable,\n  loadingBracketParses: observable,\n  loadingOverallParses: observable,\n  timeRemaining: observable,\n  loadingZones: observable,\n  bestBracket: observable,\n  medianBracket: observable,\n  bestOverall: observable,\n  medianOverall: observable,\n  zones: observable,\n});\n\nexport default RaidsStore;\n","import React from \"react\";\nimport RaidsStore from \"./raidsStore\";\n\nexport const storesContext = React.createContext({\n  raidStore: new RaidsStore(),\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { useStores } from \"hooks/useStores\";\n\nconst App = observer(() => {\n  const { raidStore } = useStores();\n\n  const getParseColor = (value) => {\n    let color = \"black\";\n    if (value === 100) {\n      color = \"#F4D03F\";\n    } else if (value >= 95 && value < 100) {\n      color = \"#F39C12\";\n    } else if (value >= 75 && value < 95) {\n      color = \"#8E44AD\";\n    } else if (value >= 50 && value < 75) {\n      color = \"#3498DB\";\n    } else if (value >= 25 && value < 50) {\n      color = \"#2ECC71\";\n    } else if (value >= 0 && value < 25) {\n      color = \"#BDC3C7\";\n    }\n    return color;\n  };\n\n  const generateTable = (data) => {\n    const bwl = raidStore.zones.find((zone) => zone.id === 1002);\n    // generate header row\n    const headers = [\"Raider\", \"Average\"];\n    bwl.encounters.forEach((encounter) => {\n      headers.push(encounter.name);\n    });\n\n    const rows = [];\n    data.forEach((raider) => {\n      const row = [raider.name];\n      const encounters = [];\n      let avg = 0;\n      let count = 0;\n      bwl.encounters.forEach((encounter) => {\n        const value = raider[encounter.id];\n        if (value) {\n          avg += Number(value);\n          count += 1;\n        }\n        encounters.push(value ?? \"-\");\n      });\n\n      if (avg !== 0) {\n        row.push((avg / count).toFixed(2));\n        encounters.forEach((encounter) => row.push(encounter));\n        rows.push(row);\n      }\n    });\n\n    return (\n      <table style={{ borderCollapse: \"collapse\" }}>\n        <thead>\n          <tr>\n            {headers.map((d) => (\n              <th\n                key={d}\n                style={{\n                  padding: \"5px\",\n                  textAlign: \"left\",\n                  fontWeight: \"bold\",\n                  backgroundColor: \"#5D6D7E\",\n                  color: \"white\",\n                  border: \"1px solid black\",\n                }}\n              >\n                {d}\n              </th>\n            ))}\n          </tr>\n        </thead>\n\n        <tbody>\n          {rows.map((row) => (\n            <tr>\n              {row.map((d) => (\n                <td style={{ padding: \"0px 5px\", border: \"1px solid black\", color: `${getParseColor(d)}` }}>{d}</td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  };\n\n  return (\n    <div>\n      {raidStore.loading ? (\n        <div>\n          <p style={{ margin: \"5px\" }}>Due to WarcraftLog's API request limit, loading will take about 2 minutes.</p>\n          {raidStore.timeRemaining > 0 && (\n            <p style={{ margin: \"5px\" }}>{`Estimated time remaining: ${raidStore.timeRemaining}s`}</p>\n          )}\n        </div>\n      ) : raidStore.error !== \"\" ? (\n        `ERROR: ${raidStore.error}`\n      ) : (\n        <div>\n          <div style={{ margin: \"5px\", width: \"800px\" }}>\n            This is currently finding everyone who has raided BWL in the past 4 weeks, and then taking their last 6\n            weeks of BWL parses to populate the tables. If someone only has 3 weeks of parse data, then their median is\n            based on the 3 weeks of data available instead of 6.\n          </div>\n          <br />\n          <p style={{ margin: \"5px\" }}>{`Healing parse for the following people: ${raidStore.healers\n            .sort()\n            .join(\", \")}`}</p>\n          <br />\n          <p style={{ margin: \"5px\" }}>Median Bracket:</p>\n          {generateTable(raidStore.medianBracket)}\n          <p>Best Bracket:</p>\n          {generateTable(raidStore.bestBracket)}\n          <p>Median Overall:</p>\n          {generateTable(raidStore.medianOverall)}\n          <p>Best Overall:</p>\n          {generateTable(raidStore.bestOverall)}\n        </div>\n      )}\n    </div>\n  );\n});\n\nexport default App;\n","import React from 'react'\nimport { storesContext } from 'stores'\n\nexport const useStores = () => React.useContext(storesContext);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}