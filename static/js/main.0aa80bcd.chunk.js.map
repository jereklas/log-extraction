{"version":3,"sources":["services/request.js","constants.js","stores/raidsStore.js","stores/index.js","App.js","hooks/useStores.jsx","serviceWorker.js","index.js"],"names":["client","axios","create","baseURL","request","options","params","api_key","then","response","console","debug","data","catch","error","config","status","headers","message","Promise","reject","RaidsStore","raidsById","fightsByRaidId","parsesByRaider","zones","loading","loadingBracketParses","loadingOverallParses","loadingZones","medianBracket","bestBracket","medianOverall","bestOverall","healers","updateWhenFinished","reaction","end","Date","now","log","start","Object","keys","forEach","raider","bestBracketRow","name","medianBracketRow","bestOverallRow","medianOverallRow","bracket","boss","best","average","count","percentile","Number","isInteger","toFixed","overall","push","this","raidCutoff","weeks","parseCutoff","url","raidsToGetFightsFor","values","raid","idx","dayOfWeek","getDay","id","zone","requests","raidId","all","spread","responses","fightsToGetRaidersFrom","title","fight","exportedCharacters","char","bracketRequests","raiders","length","i","metric","includes","overallRequests","bracketResponses","characterName","filter","parse","startTime","encounter","encounterID","errors","overallResponses","decorate","observable","storesContext","React","createContext","raidStore","App","observer","useContext","getParseColor","value","color","generateTable","bwl","find","encounters","rows","row","avg","style","borderCollapse","map","d","key","padding","textAlign","fontWeight","backgroundColor","border","margin","width","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0aa80bcd.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { url } from \"constants.js\";\n\nconst client = axios.create({\n  baseURL: url,\n});\n\n/**\n * Request Wrapper with default success/error actions\n */\nconst request = function (options) {\n  const onSuccess = function (response) {\n    console.debug(\"Request Successful!\", response);\n    return response.data;\n  };\n\n  const onError = function (error) {\n    console.error(\"Request Failed:\", error.config);\n\n    // log response data if it exists\n    if (error.response) {\n      console.error(\"Status:\", error.response.status);\n      console.error(\"Data:\", error.response.data);\n      console.error(\"Headers:\", error.response.headers);\n    } else {\n      console.error(\"Error Message:\", error.message);\n    }\n\n    return Promise.reject(error.response || error.message);\n  };\n\n  // add the api_key to each request\n  options.params = { ...options.params, api_key: \"ce3902772ae4b70c973b6a9f54f844fd\" };\n\n  return client(options).then(onSuccess).catch(onError);\n};\n\nexport default request;\n","const url = 'https://classic.warcraftlogs.com:443/v1/';\n\nexport {\n    url\n};","import { decorate, observable, reaction } from \"mobx\";\nimport axios from \"axios\";\nimport request from \"services/request\";\n\nconst weekInNanoSeconds = 7 * 24 * 60 * 60 * 1000;\nconst Wednesday = 3;\nconst Thursday = 4;\nconst weeks = 4;\n\nclass RaidsStore {\n  raidsById = {};\n  fightsByRaidId = {};\n  parsesByRaider = {};\n  zones = {};\n\n  loading = true;\n  loadingBracketParses = true;\n  loadingOverallParses = true;\n  loadingZones = true;\n  error = \"\";\n\n  medianBracket = [];\n  bestBracket = [];\n  medianOverall = [];\n  bestOverall = [];\n\n  healers = [\n    \"Aemon\",\n    \"Amonmin\",\n    \"Dabaslab\",\n    \"Doublebubble\",\n    \"Jaiden\",\n    \"Jerico\",\n    \"Naglepally\",\n    \"Rodney\",\n    \"Sarianne\",\n    \"Egstric\",\n    \"Erelis\",\n  ];\n  start;\n  end;\n\n  constructor() {\n    // this.storageRaidsById = JSON.parse(localStorage.getItem(\"raids\")) ?? {};\n    // this.fightsByRaidId = JSON.parse(localStorage.getItem(\"fights\")) ?? {};\n    // this.parsesByRaider = JSON.parse(localStorage.getItem(\"parses\")) ?? {};\n\n    this.start = Date.now();\n    const raidCutoff = this.start - weeks * weekInNanoSeconds;\n    const parseCutoff = this.start - 6 * weekInNanoSeconds;\n\n    request({ url: \"/zones\" }).then((response) => {\n      this.zones = response;\n      this.loadingZones = false;\n    });\n\n    request({\n      url: \"/reports/guild/RIVAL/Fairbanks/US\",\n    }).then((response) => {\n      const raidsToGetFightsFor = [];\n\n      Object.values(response).forEach((raid, idx) => {\n        const duration = raid.end - raid.start;\n\n        if (duration > 0) {\n          const dayOfWeek = new Date(raid.start).getDay();\n          this.raidsById[raid.id] = raid;\n          if (raid.start > raidCutoff && (dayOfWeek === Wednesday || dayOfWeek === Thursday) && raid.zone === 1002) {\n            raidsToGetFightsFor.push(raid.id);\n          }\n        }\n      });\n\n      const requests = [];\n      raidsToGetFightsFor.forEach((raidId) => {\n        requests.push(request({ url: `/report/fights/${raidId}` }));\n      });\n\n      axios.all(requests).then(\n        axios.spread((...responses) => {\n          const fightsToGetRaidersFrom = [];\n          Object.values(this.raidsById).forEach((raid) => {\n            responses.forEach((response) => {\n              this.fightsByRaidId[raid.id] = response;\n              if (raid.start === response.start && raid.title === response.title) {\n                fightsToGetRaidersFrom.push(response);\n              }\n            });\n          });\n\n          fightsToGetRaidersFrom.forEach((fight) => {\n            fight.exportedCharacters.forEach((char) => {\n              this.parsesByRaider[char.name] = {};\n            });\n          });\n\n          //send parse requests for bracket parses delayed between each other to prevent api lockout\n          const bracketRequests = [];\n          const raiders = Object.keys(this.parsesByRaider);\n          console.log(\"raiders found:\", raiders.length);\n          for (let i = 0; i < raiders.length; i++) {\n            const raider = raiders[i];\n            bracketRequests.push(\n              request({\n                url: `/parses/character/${raider}/Fairbanks/US`,\n                params: { bracket: -1, metric: this.healers.includes(raider) ? \"hps\" : \"dps\" },\n              })\n            );\n          }\n\n          const overallRequests = [];\n          for (let i = 0; i < raiders.length; i++) {\n            const raider = raiders[i];\n            overallRequests.push(\n              request({\n                url: `/parses/character/${raider}/Fairbanks/US`,\n                params: { metric: this.healers.includes(raider) ? \"hps\" : \"dps\" },\n              })\n            );\n          }\n\n          axios\n            .all(bracketRequests)\n            .then(\n              axios.spread((...bracketResponses) => {\n                bracketResponses.forEach((response) => {\n                  if (response[0]) {\n                    const name = response[0].characterName;\n                    this.parsesByRaider[name].bracket = {};\n                    const data = response.filter((parse) => parse.startTime > parseCutoff);\n\n                    data.forEach((encounter) => {\n                      if (!this.parsesByRaider[name].bracket[encounter.encounterID]) {\n                        this.parsesByRaider[name].bracket[encounter.encounterID] = [];\n                      }\n                      this.parsesByRaider[name].bracket[encounter.encounterID].push(encounter.percentile);\n                    });\n                  }\n                });\n                this.loadingBracketParses = false;\n              })\n            )\n            .catch((errors) => {\n              this.error =\n                \"There were too many requests made recently to WarcraftLogs. Wait 5-10 minutes to allow my api key to becoming unlocked and then try re-loading the page.\";\n              this.loadingBracketParses = false;\n            });\n\n          axios\n            .all(overallRequests)\n            .then(\n              axios.spread((...overallResponses) => {\n                overallResponses.forEach((response) => {\n                  if (response[0]) {\n                    const name = response[0].characterName;\n                    this.parsesByRaider[name].overall = {};\n                    const data = response.filter((parse) => parse.startTime > parseCutoff);\n\n                    data.forEach((encounter) => {\n                      if (!this.parsesByRaider[name].overall[encounter.encounterID]) {\n                        this.parsesByRaider[name].overall[encounter.encounterID] = [];\n                      }\n                      this.parsesByRaider[name].overall[encounter.encounterID].push(encounter.percentile);\n                    });\n                  }\n                });\n                this.loadingOverallParses = false;\n              })\n            )\n            .catch((errors) => {\n              this.error =\n                \"There were too many requests made recently to WarcraftLogs. Wait 5-10 minutes to allow my api key to becoming unlocked and then try re-loading the page.\";\n              this.loadingOverallParses = false;\n            });\n        })\n      );\n    });\n  }\n\n  updateWhenFinished = reaction(\n    () => this.loadingBracketParses || this.loadingOverallParses || this.loadingZones,\n    () => {\n      if (!this.loadingBracketParses && !this.loadingOverallParses && !this.loadingZones) {\n        this.end = Date.now();\n        console.log(\"done loading, time elapsed: \", this.end - this.start);\n\n        Object.keys(this.parsesByRaider).forEach((raider) => {\n          const bestBracketRow = { name: raider };\n          const medianBracketRow = { name: raider };\n          const bestOverallRow = { name: raider };\n          const medianOverallRow = { name: raider };\n\n          if (this.parsesByRaider[raider].bracket) {\n            Object.keys(this.parsesByRaider[raider].bracket).forEach((boss) => {\n              let best = 0;\n              let average = 0;\n              let count = 0;\n              this.parsesByRaider[raider].bracket[boss].forEach((percentile) => {\n                if (percentile > best) {\n                  best = percentile;\n                }\n\n                average += percentile;\n                count += 1;\n              });\n              average /= count;\n              bestBracketRow[boss] = Number.isInteger(best) ? best : best.toFixed(2);\n              medianBracketRow[boss] = Number.isInteger(average) ? average : average.toFixed(2);\n            });\n          }\n\n          if (this.parsesByRaider[raider].overall) {\n            Object.keys(this.parsesByRaider[raider].overall).forEach((boss) => {\n              let best = 0;\n              let average = 0;\n              let count = 0;\n              this.parsesByRaider[raider].overall[boss].forEach((percentile) => {\n                if (percentile > best) {\n                  best = percentile;\n                }\n\n                average += percentile;\n                count += 1;\n              });\n              average /= count;\n              bestOverallRow[boss] = Number.isInteger(best) ? best : best.toFixed(2);\n              medianOverallRow[boss] = Number.isInteger(average) ? average : average.toFixed(2);\n            });\n          }\n\n          this.bestBracket.push(bestBracketRow);\n          this.medianBracket.push(medianBracketRow);\n          this.bestOverall.push(bestOverallRow);\n          this.medianOverall.push(medianOverallRow);\n        });\n\n        this.loading = false;\n        // localStorage.setItem(\"raids\", JSON.stringify(this.raidsById));\n        // localStorage.setItem(\"fights\", JSON.stringify(this.fightsByRaidId));\n        // localStorage.setItem(\"parses\", JSON.stringify(this.parsesByRaider));\n      }\n    }\n  );\n}\n\ndecorate(RaidsStore, {\n  error: observable,\n  loading: observable,\n  loadingBracketParses: observable,\n  loadingOverallParses: observable,\n  loadingZones: observable,\n  bestBracket: observable,\n  medianBracket: observable,\n  bestOverall: observable,\n  medianOverall: observable,\n  zones: observable,\n});\n\nexport default RaidsStore;\n","import React from \"react\";\nimport RaidsStore from \"./raidsStore\";\n\nexport const storesContext = React.createContext({\n  raidStore: new RaidsStore(),\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { useStores } from \"hooks/useStores\";\n\nconst App = observer(() => {\n  const { raidStore } = useStores();\n\n  const getParseColor = (value) => {\n    let color = \"black\";\n    if (value === 100) {\n      color = \"#F4D03F\";\n    } else if (value >= 95 && value < 100) {\n      color = \"#F39C12\";\n    } else if (value >= 75 && value < 95) {\n      color = \"#8E44AD\";\n    } else if (value >= 50 && value < 75) {\n      color = \"#3498DB\";\n    } else if (value >= 25 && value < 50) {\n      color = \"#2ECC71\";\n    } else if (value >= 0 && value < 25) {\n      color = \"#BDC3C7\";\n    }\n    return color;\n  };\n\n  const generateTable = (data) => {\n    const bwl = raidStore.zones.find((zone) => zone.id === 1002);\n    // generate header row\n    const headers = [\"Raider\", \"Average\"];\n    bwl.encounters.forEach((encounter) => {\n      headers.push(encounter.name);\n    });\n\n    const rows = [];\n    data.forEach((raider) => {\n      const row = [raider.name];\n      const encounters = [];\n      let avg = 0;\n      let count = 0;\n      bwl.encounters.forEach((encounter) => {\n        const value = raider[encounter.id];\n        if (value) {\n          avg += Number(value);\n          count += 1;\n        }\n        encounters.push(value ?? \"-\");\n      });\n\n      if (avg !== 0) {\n        row.push((avg / count).toFixed(2));\n        encounters.forEach((encounter) => row.push(encounter));\n        rows.push(row);\n      }\n    });\n\n    return (\n      <table style={{ borderCollapse: \"collapse\" }}>\n        <thead>\n          <tr>\n            {headers.map((d) => (\n              <th\n                key={d}\n                style={{\n                  padding: \"5px\",\n                  textAlign: \"left\",\n                  fontWeight: \"bold\",\n                  backgroundColor: \"#5D6D7E\",\n                  color: \"white\",\n                  border: \"1px solid black\",\n                }}\n              >\n                {d}\n              </th>\n            ))}\n          </tr>\n        </thead>\n\n        <tbody>\n          {rows.map((row) => (\n            <tr>\n              {row.map((d) => (\n                <td style={{ padding: \"0px 5px\", border: \"1px solid black\", color: `${getParseColor(d)}` }}>{d}</td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  };\n\n  return (\n    <div>\n      {raidStore.loading ? (\n        \"Loading... Depending on WarcraftLogs this can take 5 seconds or 1 minute. Be Patient :)\"\n      ) : raidStore.error !== \"\" ? (\n        `ERROR: ${raidStore.error}`\n      ) : (\n        <div>\n          <div style={{ margin: \"5px\", width: \"600px\" }}>\n            This is currently finding everyone who has raided BWL in the past 4 weeks, and then taking their last 6\n            weeks of BWL parses to populate the tables. If someone only has 3 weeks of parse data, then their median is\n            based on the 3 weeks of data available instead of 6. I wasn't able to find a good way to determine when to\n            grab healing parses, so I currently have a list of healers. If we get new healers, or someone is no longer a\n            healer that list will have to be updated.\n          </div>\n          <br />\n          <p style={{ margin: \"5px\" }}>Median Bracket:</p>\n          {generateTable(raidStore.medianBracket)}\n          <p>Best Bracket:</p>\n          {generateTable(raidStore.bestBracket)}\n          <p>Median Overall:</p>\n          {generateTable(raidStore.medianOverall)}\n          <p>Best Overall:</p>\n          {generateTable(raidStore.bestOverall)}\n        </div>\n      )}\n    </div>\n  );\n});\n\nexport default App;\n","import React from 'react'\nimport { storesContext } from 'stores'\n\nexport const useStores = () => React.useContext(storesContext);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}